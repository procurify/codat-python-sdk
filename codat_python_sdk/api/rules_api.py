"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from codat_python_sdk.api_client import ApiClient, Endpoint as _Endpoint
from codat_python_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from codat_python_sdk.model.codat_public_api_models_rules_add_rule_model import CodatPublicApiModelsRulesAddRuleModel
from codat_python_sdk.model.codat_public_api_models_rules_rule import CodatPublicApiModelsRulesRule
from codat_python_sdk.model.codat_public_api_models_rules_rule_paged_response_model import CodatPublicApiModelsRulesRulePagedResponseModel
from codat_python_sdk.model.codat_rules_contracts_responses_alert import CodatRulesContractsResponsesAlert
from codat_python_sdk.model.codat_rules_contracts_responses_alert_paged_response_model import CodatRulesContractsResponsesAlertPagedResponseModel


class RulesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __rules_alerts_alert_id_get(
            self,
            alert_id,
            **kwargs
        ):
            """rules_alerts_alert_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_alerts_alert_id_get(alert_id, async_req=True)
            >>> result = thread.get()

            Args:
                alert_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatRulesContractsResponsesAlert
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['alert_id'] = \
                alert_id
            return self.call_with_http_info(**kwargs)

        self.rules_alerts_alert_id_get = _Endpoint(
            settings={
                'response_type': (CodatRulesContractsResponsesAlert,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules/alerts/{alertId}',
                'operation_id': 'rules_alerts_alert_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'alert_id',
                ],
                'required': [
                    'alert_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alert_id':
                        (str,),
                },
                'attribute_map': {
                    'alert_id': 'alertId',
                },
                'location_map': {
                    'alert_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rules_alerts_alert_id_get
        )

        def __rules_alerts_alert_id_resolve_post(
            self,
            alert_id,
            **kwargs
        ):
            """rules_alerts_alert_id_resolve_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_alerts_alert_id_resolve_post(alert_id, async_req=True)
            >>> result = thread.get()

            Args:
                alert_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatRulesContractsResponsesAlert
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['alert_id'] = \
                alert_id
            return self.call_with_http_info(**kwargs)

        self.rules_alerts_alert_id_resolve_post = _Endpoint(
            settings={
                'response_type': (CodatRulesContractsResponsesAlert,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules/alerts/{alertId}/resolve',
                'operation_id': 'rules_alerts_alert_id_resolve_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'alert_id',
                ],
                'required': [
                    'alert_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alert_id':
                        (str,),
                },
                'attribute_map': {
                    'alert_id': 'alertId',
                },
                'location_map': {
                    'alert_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rules_alerts_alert_id_resolve_post
        )

        def __rules_alerts_get(
            self,
            page=1,
            **kwargs
        ):
            """rules_alerts_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_alerts_get(page=1, async_req=True)
            >>> result = thread.get()

            Args:
                page (int): defaults to 1, must be one of [1]

            Keyword Args:
                company_id (str): [optional]
                page_size (int): [optional] if omitted the server will use the default value of 100
                query (str): [optional]
                order_by (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatRulesContractsResponsesAlertPagedResponseModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.rules_alerts_get = _Endpoint(
            settings={
                'response_type': (CodatRulesContractsResponsesAlertPagedResponseModel,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules/alerts',
                'operation_id': 'rules_alerts_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'company_id',
                    'page_size',
                    'query',
                    'order_by',
                ],
                'required': [
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'company_id':
                        (str,),
                    'page_size':
                        (int,),
                    'query':
                        (str,),
                    'order_by':
                        (str,),
                },
                'attribute_map': {
                    'page': 'page',
                    'company_id': 'companyId',
                    'page_size': 'pageSize',
                    'query': 'query',
                    'order_by': 'orderBy',
                },
                'location_map': {
                    'page': 'query',
                    'company_id': 'query',
                    'page_size': 'query',
                    'query': 'query',
                    'order_by': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rules_alerts_get
        )

        def __rules_get(
            self,
            page=1,
            **kwargs
        ):
            """Fetch a list of rules a company is subscribed to  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_get(page=1, async_req=True)
            >>> result = thread.get()

            Args:
                page (int): defaults to 1, must be one of [1]

            Keyword Args:
                company_id (str): [optional]
                page_size (int): [optional] if omitted the server will use the default value of 100
                query (str): [optional]
                order_by (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsRulesRulePagedResponseModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.rules_get = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsRulesRulePagedResponseModel,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules',
                'operation_id': 'rules_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'company_id',
                    'page_size',
                    'query',
                    'order_by',
                ],
                'required': [
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'company_id':
                        (str,),
                    'page_size':
                        (int,),
                    'query':
                        (str,),
                    'order_by':
                        (str,),
                },
                'attribute_map': {
                    'page': 'page',
                    'company_id': 'companyId',
                    'page_size': 'pageSize',
                    'query': 'query',
                    'order_by': 'orderBy',
                },
                'location_map': {
                    'page': 'query',
                    'company_id': 'query',
                    'page_size': 'query',
                    'query': 'query',
                    'order_by': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rules_get
        )

        def __rules_post(
            self,
            **kwargs
        ):
            """Subscribe to a rule  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                codat_public_api_models_rules_add_rule_model (CodatPublicApiModelsRulesAddRuleModel): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsRulesRule
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.rules_post = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsRulesRule,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules',
                'operation_id': 'rules_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'codat_public_api_models_rules_add_rule_model',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'codat_public_api_models_rules_add_rule_model':
                        (CodatPublicApiModelsRulesAddRuleModel,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'codat_public_api_models_rules_add_rule_model': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__rules_post
        )

        def __rules_rule_id_alerts_get(
            self,
            rule_id,
            page=1,
            **kwargs
        ):
            """rules_rule_id_alerts_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_rule_id_alerts_get(rule_id, page=1, async_req=True)
            >>> result = thread.get()

            Args:
                rule_id (str):
                page (int): defaults to 1, must be one of [1]

            Keyword Args:
                page_size (int): [optional] if omitted the server will use the default value of 100
                query (str): [optional]
                order_by (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatRulesContractsResponsesAlertPagedResponseModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['rule_id'] = \
                rule_id
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.rules_rule_id_alerts_get = _Endpoint(
            settings={
                'response_type': (CodatRulesContractsResponsesAlertPagedResponseModel,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules/{ruleId}/alerts',
                'operation_id': 'rules_rule_id_alerts_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'rule_id',
                    'page',
                    'page_size',
                    'query',
                    'order_by',
                ],
                'required': [
                    'rule_id',
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rule_id':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'query':
                        (str,),
                    'order_by':
                        (str,),
                },
                'attribute_map': {
                    'rule_id': 'ruleId',
                    'page': 'page',
                    'page_size': 'pageSize',
                    'query': 'query',
                    'order_by': 'orderBy',
                },
                'location_map': {
                    'rule_id': 'path',
                    'page': 'query',
                    'page_size': 'query',
                    'query': 'query',
                    'order_by': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rules_rule_id_alerts_get
        )

        def __rules_rule_id_delete(
            self,
            rule_id,
            **kwargs
        ):
            """rules_rule_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_rule_id_delete(rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                rule_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['rule_id'] = \
                rule_id
            return self.call_with_http_info(**kwargs)

        self.rules_rule_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules/{ruleId}',
                'operation_id': 'rules_rule_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'rule_id',
                ],
                'required': [
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rule_id':
                        (str,),
                },
                'attribute_map': {
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'rule_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rules_rule_id_delete
        )

        def __rules_rule_id_get(
            self,
            rule_id,
            **kwargs
        ):
            """rules_rule_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_rule_id_get(rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                rule_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsRulesRule
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['rule_id'] = \
                rule_id
            return self.call_with_http_info(**kwargs)

        self.rules_rule_id_get = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsRulesRule,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules/{ruleId}',
                'operation_id': 'rules_rule_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'rule_id',
                ],
                'required': [
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rule_id':
                        (str,),
                },
                'attribute_map': {
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'rule_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__rules_rule_id_get
        )

        def __rules_rule_id_put(
            self,
            rule_id,
            **kwargs
        ):
            """rules_rule_id_put  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rules_rule_id_put(rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                rule_id (str):

            Keyword Args:
                codat_public_api_models_rules_rule (CodatPublicApiModelsRulesRule): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsRulesRule
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['rule_id'] = \
                rule_id
            return self.call_with_http_info(**kwargs)

        self.rules_rule_id_put = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsRulesRule,),
                'auth': [
                    'API Key Auth'
                ],
                'endpoint_path': '/rules/{ruleId}',
                'operation_id': 'rules_rule_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'rule_id',
                    'codat_public_api_models_rules_rule',
                ],
                'required': [
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rule_id':
                        (str,),
                    'codat_public_api_models_rules_rule':
                        (CodatPublicApiModelsRulesRule,),
                },
                'attribute_map': {
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'rule_id': 'path',
                    'codat_public_api_models_rules_rule': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__rules_rule_id_put
        )

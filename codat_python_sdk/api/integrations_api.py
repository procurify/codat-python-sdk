# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from codat_python_sdk.api_client import ApiClient


class IntegrationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def integrations_bank_settings_get(self, **kwargs):  # noqa: E501
        """integrations_bank_settings_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_bank_settings_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CodatClientsApiClientContractBankSettingsDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_bank_settings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.integrations_bank_settings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def integrations_bank_settings_get_with_http_info(self, **kwargs):  # noqa: E501
        """integrations_bank_settings_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_bank_settings_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CodatClientsApiClientContractBankSettingsDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_bank_settings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/bankSettings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatClientsApiClientContractBankSettingsDataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_bank_settings_put(self, **kwargs):  # noqa: E501
        """integrations_bank_settings_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_bank_settings_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodatClientsApiClientContractBankSettingsDataset body:
        :return: CodatClientsApiClientContractBankSettingsDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_bank_settings_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.integrations_bank_settings_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def integrations_bank_settings_put_with_http_info(self, **kwargs):  # noqa: E501
        """integrations_bank_settings_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_bank_settings_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CodatClientsApiClientContractBankSettingsDataset body:
        :return: CodatClientsApiClientContractBankSettingsDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_bank_settings_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/bankSettings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatClientsApiClientContractBankSettingsDataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_credentials_platform_key_delete(self, platform_key, **kwargs):  # noqa: E501
        """Delete credentials used to authenticate with an accounting platform  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_credentials_platform_key_delete(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsPlatformCredentialsPlatformCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_credentials_platform_key_delete_with_http_info(platform_key, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_credentials_platform_key_delete_with_http_info(platform_key, **kwargs)  # noqa: E501
            return data

    def integrations_credentials_platform_key_delete_with_http_info(self, platform_key, **kwargs):  # noqa: E501
        """Delete credentials used to authenticate with an accounting platform  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_credentials_platform_key_delete_with_http_info(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsPlatformCredentialsPlatformCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_credentials_platform_key_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `integrations_credentials_platform_key_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'platform_key' in params:
            path_params['platformKey'] = params['platform_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/credentials/{platformKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatPublicApiModelsPlatformCredentialsPlatformCredentials',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_credentials_platform_key_get(self, platform_key, **kwargs):  # noqa: E501
        """Fetch credentials required to authenticate with an accounting platform.  # noqa: E501

        Used to determine presence and version of credentials. Due to masking the credentials returned cannot be used  to access the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_credentials_platform_key_get(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsPlatformCredentialsPlatformCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_credentials_platform_key_get_with_http_info(platform_key, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_credentials_platform_key_get_with_http_info(platform_key, **kwargs)  # noqa: E501
            return data

    def integrations_credentials_platform_key_get_with_http_info(self, platform_key, **kwargs):  # noqa: E501
        """Fetch credentials required to authenticate with an accounting platform.  # noqa: E501

        Used to determine presence and version of credentials. Due to masking the credentials returned cannot be used  to access the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_credentials_platform_key_get_with_http_info(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsPlatformCredentialsPlatformCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_credentials_platform_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `integrations_credentials_platform_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'platform_key' in params:
            path_params['platformKey'] = params['platform_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/credentials/{platformKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatPublicApiModelsPlatformCredentialsPlatformCredentials',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_credentials_platform_key_put(self, platform_key, **kwargs):  # noqa: E501
        """Update credentials required to authenticate with an accounting platform  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_credentials_platform_key_put(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param dict(str, str) body:
        :return: CodatPublicApiModelsPlatformCredentialsPlatformCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_credentials_platform_key_put_with_http_info(platform_key, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_credentials_platform_key_put_with_http_info(platform_key, **kwargs)  # noqa: E501
            return data

    def integrations_credentials_platform_key_put_with_http_info(self, platform_key, **kwargs):  # noqa: E501
        """Update credentials required to authenticate with an accounting platform  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_credentials_platform_key_put_with_http_info(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param dict(str, str) body:
        :return: CodatPublicApiModelsPlatformCredentialsPlatformCredentials
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_credentials_platform_key_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `integrations_credentials_platform_key_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'platform_key' in params:
            path_params['platformKey'] = params['platform_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/credentials/{platformKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatPublicApiModelsPlatformCredentialsPlatformCredentials',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_get(self, page, **kwargs):  # noqa: E501
        """integrations_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_get(page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: (required)
        :param int page_size:
        :param str query:
        :param str order_by:
        :return: CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_get_with_http_info(page, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_get_with_http_info(page, **kwargs)  # noqa: E501
            return data

    def integrations_get_with_http_info(self, page, **kwargs):  # noqa: E501
        """integrations_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_get_with_http_info(page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: (required)
        :param int page_size:
        :param str query:
        :param str order_by:
        :return: CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'query', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `integrations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_platform_key_branding_get(self, platform_key, **kwargs):  # noqa: E501
        """integrations_platform_key_branding_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_platform_key_branding_get(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsClientsIntegrationBrandingModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_platform_key_branding_get_with_http_info(platform_key, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_platform_key_branding_get_with_http_info(platform_key, **kwargs)  # noqa: E501
            return data

    def integrations_platform_key_branding_get_with_http_info(self, platform_key, **kwargs):  # noqa: E501
        """integrations_platform_key_branding_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_platform_key_branding_get_with_http_info(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsClientsIntegrationBrandingModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_platform_key_branding_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `integrations_platform_key_branding_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'platform_key' in params:
            path_params['platformKey'] = params['platform_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{platformKey}/branding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatPublicApiModelsClientsIntegrationBrandingModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_platform_key_enabled_put(self, platform_key, **kwargs):  # noqa: E501
        """integrations_platform_key_enabled_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_platform_key_enabled_put(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param CodatPublicApiModelsPlatformCredentialsEnabledArgs body:
        :return: CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_platform_key_enabled_put_with_http_info(platform_key, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_platform_key_enabled_put_with_http_info(platform_key, **kwargs)  # noqa: E501
            return data

    def integrations_platform_key_enabled_put_with_http_info(self, platform_key, **kwargs):  # noqa: E501
        """integrations_platform_key_enabled_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_platform_key_enabled_put_with_http_info(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :param CodatPublicApiModelsPlatformCredentialsEnabledArgs body:
        :return: CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_platform_key_enabled_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `integrations_platform_key_enabled_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'platform_key' in params:
            path_params['platformKey'] = params['platform_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{platformKey}/enabled', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatPublicApiModelsPlatformCredentialsPlatformSourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def integrations_platform_key_get(self, platform_key, **kwargs):  # noqa: E501
        """integrations_platform_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_platform_key_get(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.integrations_platform_key_get_with_http_info(platform_key, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_platform_key_get_with_http_info(platform_key, **kwargs)  # noqa: E501
            return data

    def integrations_platform_key_get_with_http_info(self, platform_key, **kwargs):  # noqa: E501
        """integrations_platform_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_platform_key_get_with_http_info(platform_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform_key: (required)
        :return: CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_platform_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform_key' is set
        if ('platform_key' not in params or
                params['platform_key'] is None):
            raise ValueError("Missing the required parameter `platform_key` when calling `integrations_platform_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'platform_key' in params:
            path_params['platformKey'] = params['platform_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key Auth']  # noqa: E501

        return self.api_client.call_api(
            '/integrations/{platformKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodatPublicApiModelsPlatformCredentialsPlatformSourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from codat_python_sdk.api_client import ApiClient, Endpoint as _Endpoint
from codat_python_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from codat_python_sdk.model.codat_clients_api_client_contract_bank_settings_dataset import CodatClientsApiClientContractBankSettingsDataset
from codat_python_sdk.model.codat_public_api_models_clients_integration_branding_model import CodatPublicApiModelsClientsIntegrationBrandingModel
from codat_python_sdk.model.codat_public_api_models_platform_credentials_enabled_args import CodatPublicApiModelsPlatformCredentialsEnabledArgs
from codat_python_sdk.model.codat_public_api_models_platform_credentials_platform_source_model import CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
from codat_python_sdk.model.codat_public_api_models_platform_credentials_platform_source_model_paged_response_model import CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel


class IntegrationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __integrations_bank_settings_get(
            self,
            **kwargs
        ):
            """integrations_bank_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_bank_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatClientsApiClientContractBankSettingsDataset
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.integrations_bank_settings_get = _Endpoint(
            settings={
                'response_type': (CodatClientsApiClientContractBankSettingsDataset,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/bankSettings',
                'operation_id': 'integrations_bank_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__integrations_bank_settings_get
        )

        def __integrations_bank_settings_put(
            self,
            **kwargs
        ):
            """integrations_bank_settings_put  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_bank_settings_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                codat_clients_api_client_contract_bank_settings_dataset (CodatClientsApiClientContractBankSettingsDataset): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatClientsApiClientContractBankSettingsDataset
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.integrations_bank_settings_put = _Endpoint(
            settings={
                'response_type': (CodatClientsApiClientContractBankSettingsDataset,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/bankSettings',
                'operation_id': 'integrations_bank_settings_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'codat_clients_api_client_contract_bank_settings_dataset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'codat_clients_api_client_contract_bank_settings_dataset':
                        (CodatClientsApiClientContractBankSettingsDataset,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'codat_clients_api_client_contract_bank_settings_dataset': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__integrations_bank_settings_put
        )

        def __integrations_credentials_platform_key_delete(
            self,
            platform_key,
            **kwargs
        ):
            """Delete credentials used to authenticate with an accounting platform  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_credentials_platform_key_delete(platform_key, async_req=True)
            >>> result = thread.get()

            Args:
                platform_key (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform_key'] = \
                platform_key
            return self.call_with_http_info(**kwargs)

        self.integrations_credentials_platform_key_delete = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/credentials/{platformKey}',
                'operation_id': 'integrations_credentials_platform_key_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_key',
                ],
                'required': [
                    'platform_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_key':
                        (str,),
                },
                'attribute_map': {
                    'platform_key': 'platformKey',
                },
                'location_map': {
                    'platform_key': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__integrations_credentials_platform_key_delete
        )

        def __integrations_credentials_platform_key_get(
            self,
            platform_key,
            **kwargs
        ):
            """Fetch credentials required to authenticate with an accounting platform.  # noqa: E501

            Used to determine presence and version of credentials. Due to masking the credentials returned cannot be used  to access the API.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_credentials_platform_key_get(platform_key, async_req=True)
            >>> result = thread.get()

            Args:
                platform_key (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform_key'] = \
                platform_key
            return self.call_with_http_info(**kwargs)

        self.integrations_credentials_platform_key_get = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/credentials/{platformKey}',
                'operation_id': 'integrations_credentials_platform_key_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_key',
                ],
                'required': [
                    'platform_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_key':
                        (str,),
                },
                'attribute_map': {
                    'platform_key': 'platformKey',
                },
                'location_map': {
                    'platform_key': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__integrations_credentials_platform_key_get
        )

        def __integrations_credentials_platform_key_put(
            self,
            platform_key,
            **kwargs
        ):
            """Update credentials required to authenticate with an accounting platform  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_credentials_platform_key_put(platform_key, async_req=True)
            >>> result = thread.get()

            Args:
                platform_key (str):

            Keyword Args:
                request_body ({str: (str,)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform_key'] = \
                platform_key
            return self.call_with_http_info(**kwargs)

        self.integrations_credentials_platform_key_put = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/credentials/{platformKey}',
                'operation_id': 'integrations_credentials_platform_key_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_key',
                    'request_body',
                ],
                'required': [
                    'platform_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_key':
                        (str,),
                    'request_body':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'platform_key': 'platformKey',
                },
                'location_map': {
                    'platform_key': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__integrations_credentials_platform_key_put
        )

        def __integrations_get(
            self,
            page=1,
            **kwargs
        ):
            """integrations_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_get(page=1, async_req=True)
            >>> result = thread.get()

            Args:
                page (int): defaults to 1, must be one of [1]

            Keyword Args:
                page_size (int): [optional] if omitted the server will use the default value of 100
                query (str): [optional]
                order_by (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.integrations_get = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsPlatformCredentialsPlatformSourceModelPagedResponseModel,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations',
                'operation_id': 'integrations_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'page_size',
                    'query',
                    'order_by',
                ],
                'required': [
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'query':
                        (str,),
                    'order_by':
                        (str,),
                },
                'attribute_map': {
                    'page': 'page',
                    'page_size': 'pageSize',
                    'query': 'query',
                    'order_by': 'orderBy',
                },
                'location_map': {
                    'page': 'query',
                    'page_size': 'query',
                    'query': 'query',
                    'order_by': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__integrations_get
        )

        def __integrations_platform_key_branding_get(
            self,
            platform_key,
            **kwargs
        ):
            """integrations_platform_key_branding_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_platform_key_branding_get(platform_key, async_req=True)
            >>> result = thread.get()

            Args:
                platform_key (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsClientsIntegrationBrandingModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform_key'] = \
                platform_key
            return self.call_with_http_info(**kwargs)

        self.integrations_platform_key_branding_get = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsClientsIntegrationBrandingModel,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/{platformKey}/branding',
                'operation_id': 'integrations_platform_key_branding_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_key',
                ],
                'required': [
                    'platform_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_key':
                        (str,),
                },
                'attribute_map': {
                    'platform_key': 'platformKey',
                },
                'location_map': {
                    'platform_key': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__integrations_platform_key_branding_get
        )

        def __integrations_platform_key_enabled_put(
            self,
            platform_key,
            **kwargs
        ):
            """integrations_platform_key_enabled_put  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_platform_key_enabled_put(platform_key, async_req=True)
            >>> result = thread.get()

            Args:
                platform_key (str):

            Keyword Args:
                codat_public_api_models_platform_credentials_enabled_args (CodatPublicApiModelsPlatformCredentialsEnabledArgs): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform_key'] = \
                platform_key
            return self.call_with_http_info(**kwargs)

        self.integrations_platform_key_enabled_put = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsPlatformCredentialsPlatformSourceModel,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/{platformKey}/enabled',
                'operation_id': 'integrations_platform_key_enabled_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_key',
                    'codat_public_api_models_platform_credentials_enabled_args',
                ],
                'required': [
                    'platform_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_key':
                        (str,),
                    'codat_public_api_models_platform_credentials_enabled_args':
                        (CodatPublicApiModelsPlatformCredentialsEnabledArgs,),
                },
                'attribute_map': {
                    'platform_key': 'platformKey',
                },
                'location_map': {
                    'platform_key': 'path',
                    'codat_public_api_models_platform_credentials_enabled_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__integrations_platform_key_enabled_put
        )

        def __integrations_platform_key_get(
            self,
            platform_key,
            **kwargs
        ):
            """integrations_platform_key_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.integrations_platform_key_get(platform_key, async_req=True)
            >>> result = thread.get()

            Args:
                platform_key (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CodatPublicApiModelsPlatformCredentialsPlatformSourceModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform_key'] = \
                platform_key
            return self.call_with_http_info(**kwargs)

        self.integrations_platform_key_get = _Endpoint(
            settings={
                'response_type': (CodatPublicApiModelsPlatformCredentialsPlatformSourceModel,),
                'auth': [
                    'API Key Auth',
                    'Codat Login'
                ],
                'endpoint_path': '/integrations/{platformKey}',
                'operation_id': 'integrations_platform_key_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform_key',
                ],
                'required': [
                    'platform_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform_key':
                        (str,),
                },
                'attribute_map': {
                    'platform_key': 'platformKey',
                },
                'location_map': {
                    'platform_key': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__integrations_platform_key_get
        )

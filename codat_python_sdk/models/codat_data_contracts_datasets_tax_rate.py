# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsTaxRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'code': 'str',
        'effective_tax_rate': 'float',
        'total_tax_rate': 'float',
        'components': 'list[CodatDataContractsDatasetsTaxRateComponent]',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime',
        'valid_datatype_links': 'list[CodatDataContractsDatasetsValidDatatypeLinks]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'effective_tax_rate': 'effectiveTaxRate',
        'total_tax_rate': 'totalTaxRate',
        'components': 'components',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate',
        'valid_datatype_links': 'validDatatypeLinks'
    }

    def __init__(self, id=None, name=None, code=None, effective_tax_rate=None, total_tax_rate=None, components=None, modified_date=None, source_modified_date=None, valid_datatype_links=None):  # noqa: E501
        """CodatDataContractsDatasetsTaxRate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._code = None
        self._effective_tax_rate = None
        self._total_tax_rate = None
        self._components = None
        self._modified_date = None
        self._source_modified_date = None
        self._valid_datatype_links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        self.effective_tax_rate = effective_tax_rate
        self.total_tax_rate = total_tax_rate
        if components is not None:
            self.components = components
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date
        if valid_datatype_links is not None:
            self.valid_datatype_links = valid_datatype_links

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsTaxRate.


        :param id: The id of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The name of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatDataContractsDatasetsTaxRate.


        :param name: The name of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The code of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CodatDataContractsDatasetsTaxRate.


        :param code: The code of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def effective_tax_rate(self):
        """Gets the effective_tax_rate of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The effective_tax_rate of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: float
        """
        return self._effective_tax_rate

    @effective_tax_rate.setter
    def effective_tax_rate(self, effective_tax_rate):
        """Sets the effective_tax_rate of this CodatDataContractsDatasetsTaxRate.


        :param effective_tax_rate: The effective_tax_rate of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: float
        """
        if effective_tax_rate is None:
            raise ValueError("Invalid value for `effective_tax_rate`, must not be `None`")  # noqa: E501

        self._effective_tax_rate = effective_tax_rate

    @property
    def total_tax_rate(self):
        """Gets the total_tax_rate of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The total_tax_rate of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_rate

    @total_tax_rate.setter
    def total_tax_rate(self, total_tax_rate):
        """Sets the total_tax_rate of this CodatDataContractsDatasetsTaxRate.


        :param total_tax_rate: The total_tax_rate of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: float
        """
        if total_tax_rate is None:
            raise ValueError("Invalid value for `total_tax_rate`, must not be `None`")  # noqa: E501

        self._total_tax_rate = total_tax_rate

    @property
    def components(self):
        """Gets the components of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The components of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsTaxRateComponent]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this CodatDataContractsDatasetsTaxRate.


        :param components: The components of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: list[CodatDataContractsDatasetsTaxRateComponent]
        """

        self._components = components

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsTaxRate.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsTaxRate.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    @property
    def valid_datatype_links(self):
        """Gets the valid_datatype_links of this CodatDataContractsDatasetsTaxRate.  # noqa: E501


        :return: The valid_datatype_links of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsValidDatatypeLinks]
        """
        return self._valid_datatype_links

    @valid_datatype_links.setter
    def valid_datatype_links(self, valid_datatype_links):
        """Sets the valid_datatype_links of this CodatDataContractsDatasetsTaxRate.


        :param valid_datatype_links: The valid_datatype_links of this CodatDataContractsDatasetsTaxRate.  # noqa: E501
        :type: list[CodatDataContractsDatasetsValidDatatypeLinks]
        """

        self._valid_datatype_links = valid_datatype_links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsTaxRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsTaxRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

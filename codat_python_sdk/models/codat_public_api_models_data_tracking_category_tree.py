# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatPublicApiModelsDataTrackingCategoryTree(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_categories': 'list[CodatPublicApiModelsDataTrackingCategoryTree]',
        'id': 'str',
        'parent_id': 'str',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime',
        'name': 'str',
        'has_children': 'bool',
        'status': 'CodatDataContractsDatasetsTrackingCategoryStatus'
    }

    attribute_map = {
        'sub_categories': 'subCategories',
        'id': 'id',
        'parent_id': 'parentId',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate',
        'name': 'name',
        'has_children': 'hasChildren',
        'status': 'status'
    }

    def __init__(self, sub_categories=None, id=None, parent_id=None, modified_date=None, source_modified_date=None, name=None, has_children=None, status=None):  # noqa: E501
        """CodatPublicApiModelsDataTrackingCategoryTree - a model defined in Swagger"""  # noqa: E501
        self._sub_categories = None
        self._id = None
        self._parent_id = None
        self._modified_date = None
        self._source_modified_date = None
        self._name = None
        self._has_children = None
        self._status = None
        self.discriminator = None
        if sub_categories is not None:
            self.sub_categories = sub_categories
        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date
        if name is not None:
            self.name = name
        if has_children is not None:
            self.has_children = has_children
        if status is not None:
            self.status = status

    @property
    def sub_categories(self):
        """Gets the sub_categories of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501


        :return: The sub_categories of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: list[CodatPublicApiModelsDataTrackingCategoryTree]
        """
        return self._sub_categories

    @sub_categories.setter
    def sub_categories(self, sub_categories):
        """Sets the sub_categories of this CodatPublicApiModelsDataTrackingCategoryTree.


        :param sub_categories: The sub_categories of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: list[CodatPublicApiModelsDataTrackingCategoryTree]
        """

        self._sub_categories = sub_categories

    @property
    def id(self):
        """Gets the id of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501

        The identifier for the item, unique per tracking category  # noqa: E501

        :return: The id of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatPublicApiModelsDataTrackingCategoryTree.

        The identifier for the item, unique per tracking category  # noqa: E501

        :param id: The id of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501

        The identifier for this item's immediate parent  # noqa: E501

        :return: The parent_id of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CodatPublicApiModelsDataTrackingCategoryTree.

        The identifier for this item's immediate parent  # noqa: E501

        :param parent_id: The parent_id of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501

        The date the record was last updated in the system cache  # noqa: E501

        :return: The modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.

        The date the record was last updated in the system cache  # noqa: E501

        :param modified_date: The modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501

        The date the record was last changed in the originating system  # noqa: E501

        :return: The source_modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.

        The date the record was last changed in the originating system  # noqa: E501

        :param source_modified_date: The source_modified_date of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    @property
    def name(self):
        """Gets the name of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501

        The name of the tracking category  # noqa: E501

        :return: The name of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatPublicApiModelsDataTrackingCategoryTree.

        The name of the tracking category  # noqa: E501

        :param name: The name of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_children(self):
        """Gets the has_children of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501

        Boolean value indicating whether this category has SubCategories  # noqa: E501

        :return: The has_children of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this CodatPublicApiModelsDataTrackingCategoryTree.

        Boolean value indicating whether this category has SubCategories  # noqa: E501

        :param has_children: The has_children of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: bool
        """

        self._has_children = has_children

    @property
    def status(self):
        """Gets the status of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501


        :return: The status of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :rtype: CodatDataContractsDatasetsTrackingCategoryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodatPublicApiModelsDataTrackingCategoryTree.


        :param status: The status of this CodatPublicApiModelsDataTrackingCategoryTree.  # noqa: E501
        :type: CodatDataContractsDatasetsTrackingCategoryStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatPublicApiModelsDataTrackingCategoryTree, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatPublicApiModelsDataTrackingCategoryTree):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

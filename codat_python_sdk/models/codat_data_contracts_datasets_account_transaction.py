# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsAccountTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'transaction_id': 'str',
        'note': 'str',
        'bank_account_ref': 'CodatDataContractsDatasetsAccountRef',
        '_date': 'datetime',
        'status': 'CodatDataContractsDatasetsAccountTransactionStatus',
        'currency': 'str',
        'currency_rate': 'float',
        'lines': 'list[CodatDataContractsDatasetsAccountTransactionLine]',
        'total_amount': 'float',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'transaction_id': 'transactionId',
        'note': 'note',
        'bank_account_ref': 'bankAccountRef',
        '_date': 'date',
        'status': 'status',
        'currency': 'currency',
        'currency_rate': 'currencyRate',
        'lines': 'lines',
        'total_amount': 'totalAmount',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate'
    }

    def __init__(self, id=None, transaction_id=None, note=None, bank_account_ref=None, _date=None, status=None, currency=None, currency_rate=None, lines=None, total_amount=None, modified_date=None, source_modified_date=None):  # noqa: E501
        """CodatDataContractsDatasetsAccountTransaction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._transaction_id = None
        self._note = None
        self._bank_account_ref = None
        self.__date = None
        self._status = None
        self._currency = None
        self._currency_rate = None
        self._lines = None
        self._total_amount = None
        self._modified_date = None
        self._source_modified_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if note is not None:
            self.note = note
        if bank_account_ref is not None:
            self.bank_account_ref = bank_account_ref
        if _date is not None:
            self._date = _date
        if status is not None:
            self.status = status
        if currency is not None:
            self.currency = currency
        if currency_rate is not None:
            self.currency_rate = currency_rate
        if lines is not None:
            self.lines = lines
        if total_amount is not None:
            self.total_amount = total_amount
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsAccountTransaction.


        :param id: The id of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The transaction_id of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CodatDataContractsDatasetsAccountTransaction.


        :param transaction_id: The transaction_id of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def note(self):
        """Gets the note of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The note of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CodatDataContractsDatasetsAccountTransaction.


        :param note: The note of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def bank_account_ref(self):
        """Gets the bank_account_ref of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The bank_account_ref of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: CodatDataContractsDatasetsAccountRef
        """
        return self._bank_account_ref

    @bank_account_ref.setter
    def bank_account_ref(self, bank_account_ref):
        """Sets the bank_account_ref of this CodatDataContractsDatasetsAccountTransaction.


        :param bank_account_ref: The bank_account_ref of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: CodatDataContractsDatasetsAccountRef
        """

        self._bank_account_ref = bank_account_ref

    @property
    def _date(self):
        """Gets the _date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The _date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CodatDataContractsDatasetsAccountTransaction.


        :param _date: The _date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def status(self):
        """Gets the status of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The status of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: CodatDataContractsDatasetsAccountTransactionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodatDataContractsDatasetsAccountTransaction.


        :param status: The status of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: CodatDataContractsDatasetsAccountTransactionStatus
        """

        self._status = status

    @property
    def currency(self):
        """Gets the currency of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The currency of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CodatDataContractsDatasetsAccountTransaction.


        :param currency: The currency of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_rate(self):
        """Gets the currency_rate of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The currency_rate of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this CodatDataContractsDatasetsAccountTransaction.


        :param currency_rate: The currency_rate of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: float
        """

        self._currency_rate = currency_rate

    @property
    def lines(self):
        """Gets the lines of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The lines of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsAccountTransactionLine]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this CodatDataContractsDatasetsAccountTransaction.


        :param lines: The lines of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: list[CodatDataContractsDatasetsAccountTransactionLine]
        """

        self._lines = lines

    @property
    def total_amount(self):
        """Gets the total_amount of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The total_amount of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CodatDataContractsDatasetsAccountTransaction.


        :param total_amount: The total_amount of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsAccountTransaction.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsAccountTransaction.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsAccountTransaction.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsAccountTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsAccountTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

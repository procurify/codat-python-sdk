# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatPublicApiModelsDataDataSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'company_id': 'str',
        'connection_id': 'str',
        'data_type': 'str',
        'status': 'CodatPublicApiModelsDataDatasetStatus',
        'error_message': 'str',
        'requested': 'datetime',
        'completed': 'datetime',
        'progress': 'int',
        'is_completed': 'bool',
        'is_errored': 'bool',
        'validationinformation_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'companyId',
        'connection_id': 'connectionId',
        'data_type': 'dataType',
        'status': 'status',
        'error_message': 'errorMessage',
        'requested': 'requested',
        'completed': 'completed',
        'progress': 'progress',
        'is_completed': 'isCompleted',
        'is_errored': 'isErrored',
        'validationinformation_url': 'validationinformationUrl'
    }

    def __init__(self, id=None, company_id=None, connection_id=None, data_type=None, status=None, error_message=None, requested=None, completed=None, progress=None, is_completed=None, is_errored=None, validationinformation_url=None):  # noqa: E501
        """CodatPublicApiModelsDataDataSet - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_id = None
        self._connection_id = None
        self._data_type = None
        self._status = None
        self._error_message = None
        self._requested = None
        self._completed = None
        self._progress = None
        self._is_completed = None
        self._is_errored = None
        self._validationinformation_url = None
        self.discriminator = None
        self.id = id
        self.company_id = company_id
        self.connection_id = connection_id
        if data_type is not None:
            self.data_type = data_type
        self.status = status
        if error_message is not None:
            self.error_message = error_message
        self.requested = requested
        if completed is not None:
            self.completed = completed
        self.progress = progress
        self.is_completed = is_completed
        self.is_errored = is_errored
        if validationinformation_url is not None:
            self.validationinformation_url = validationinformation_url

    @property
    def id(self):
        """Gets the id of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The id of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatPublicApiModelsDataDataSet.


        :param id: The id of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The company_id of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CodatPublicApiModelsDataDataSet.


        :param company_id: The company_id of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def connection_id(self):
        """Gets the connection_id of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The connection_id of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this CodatPublicApiModelsDataDataSet.


        :param connection_id: The connection_id of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    @property
    def data_type(self):
        """Gets the data_type of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The data_type of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CodatPublicApiModelsDataDataSet.


        :param data_type: The data_type of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def status(self):
        """Gets the status of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The status of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: CodatPublicApiModelsDataDatasetStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodatPublicApiModelsDataDataSet.


        :param status: The status of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: CodatPublicApiModelsDataDatasetStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The error_message of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CodatPublicApiModelsDataDataSet.


        :param error_message: The error_message of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def requested(self):
        """Gets the requested of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The requested of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: datetime
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this CodatPublicApiModelsDataDataSet.


        :param requested: The requested of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: datetime
        """
        if requested is None:
            raise ValueError("Invalid value for `requested`, must not be `None`")  # noqa: E501

        self._requested = requested

    @property
    def completed(self):
        """Gets the completed of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The completed of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this CodatPublicApiModelsDataDataSet.


        :param completed: The completed of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: datetime
        """

        self._completed = completed

    @property
    def progress(self):
        """Gets the progress of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The progress of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this CodatPublicApiModelsDataDataSet.


        :param progress: The progress of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: int
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def is_completed(self):
        """Gets the is_completed of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The is_completed of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this CodatPublicApiModelsDataDataSet.


        :param is_completed: The is_completed of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: bool
        """
        if is_completed is None:
            raise ValueError("Invalid value for `is_completed`, must not be `None`")  # noqa: E501

        self._is_completed = is_completed

    @property
    def is_errored(self):
        """Gets the is_errored of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The is_errored of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: bool
        """
        return self._is_errored

    @is_errored.setter
    def is_errored(self, is_errored):
        """Sets the is_errored of this CodatPublicApiModelsDataDataSet.


        :param is_errored: The is_errored of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: bool
        """
        if is_errored is None:
            raise ValueError("Invalid value for `is_errored`, must not be `None`")  # noqa: E501

        self._is_errored = is_errored

    @property
    def validationinformation_url(self):
        """Gets the validationinformation_url of this CodatPublicApiModelsDataDataSet.  # noqa: E501


        :return: The validationinformation_url of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :rtype: str
        """
        return self._validationinformation_url

    @validationinformation_url.setter
    def validationinformation_url(self, validationinformation_url):
        """Sets the validationinformation_url of this CodatPublicApiModelsDataDataSet.


        :param validationinformation_url: The validationinformation_url of this CodatPublicApiModelsDataDataSet.  # noqa: E501
        :type: str
        """

        self._validationinformation_url = validationinformation_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatPublicApiModelsDataDataSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatPublicApiModelsDataDataSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatClientsApiClientContractBankSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source_guid': 'str',
        'bank_integrations': 'list[CodatClientsApiClientContractBankIntegration]'
    }

    attribute_map = {
        'name': 'name',
        'source_guid': 'sourceGuid',
        'bank_integrations': 'bankIntegrations'
    }

    def __init__(self, name=None, source_guid=None, bank_integrations=None):  # noqa: E501
        """CodatClientsApiClientContractBankSetting - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._source_guid = None
        self._bank_integrations = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if source_guid is not None:
            self.source_guid = source_guid
        if bank_integrations is not None:
            self.bank_integrations = bank_integrations

    @property
    def name(self):
        """Gets the name of this CodatClientsApiClientContractBankSetting.  # noqa: E501


        :return: The name of this CodatClientsApiClientContractBankSetting.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatClientsApiClientContractBankSetting.


        :param name: The name of this CodatClientsApiClientContractBankSetting.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_guid(self):
        """Gets the source_guid of this CodatClientsApiClientContractBankSetting.  # noqa: E501


        :return: The source_guid of this CodatClientsApiClientContractBankSetting.  # noqa: E501
        :rtype: str
        """
        return self._source_guid

    @source_guid.setter
    def source_guid(self, source_guid):
        """Sets the source_guid of this CodatClientsApiClientContractBankSetting.


        :param source_guid: The source_guid of this CodatClientsApiClientContractBankSetting.  # noqa: E501
        :type: str
        """

        self._source_guid = source_guid

    @property
    def bank_integrations(self):
        """Gets the bank_integrations of this CodatClientsApiClientContractBankSetting.  # noqa: E501


        :return: The bank_integrations of this CodatClientsApiClientContractBankSetting.  # noqa: E501
        :rtype: list[CodatClientsApiClientContractBankIntegration]
        """
        return self._bank_integrations

    @bank_integrations.setter
    def bank_integrations(self, bank_integrations):
        """Sets the bank_integrations of this CodatClientsApiClientContractBankSetting.


        :param bank_integrations: The bank_integrations of this CodatClientsApiClientContractBankSetting.  # noqa: E501
        :type: list[CodatClientsApiClientContractBankIntegration]
        """

        self._bank_integrations = bank_integrations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatClientsApiClientContractBankSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatClientsApiClientContractBankSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

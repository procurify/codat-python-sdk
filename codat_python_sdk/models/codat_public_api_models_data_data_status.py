# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatPublicApiModelsDataDataStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'last_successful_sync': 'datetime',
        'current_status': 'str',
        'latest_sync_id': 'str',
        'latest_successful_sync_id': 'str'
    }

    attribute_map = {
        'data_type': 'dataType',
        'last_successful_sync': 'lastSuccessfulSync',
        'current_status': 'currentStatus',
        'latest_sync_id': 'latestSyncId',
        'latest_successful_sync_id': 'latestSuccessfulSyncId'
    }

    def __init__(self, data_type=None, last_successful_sync=None, current_status=None, latest_sync_id=None, latest_successful_sync_id=None):  # noqa: E501
        """CodatPublicApiModelsDataDataStatus - a model defined in Swagger"""  # noqa: E501
        self._data_type = None
        self._last_successful_sync = None
        self._current_status = None
        self._latest_sync_id = None
        self._latest_successful_sync_id = None
        self.discriminator = None
        self.data_type = data_type
        if last_successful_sync is not None:
            self.last_successful_sync = last_successful_sync
        if current_status is not None:
            self.current_status = current_status
        if latest_sync_id is not None:
            self.latest_sync_id = latest_sync_id
        if latest_successful_sync_id is not None:
            self.latest_successful_sync_id = latest_successful_sync_id

    @property
    def data_type(self):
        """Gets the data_type of this CodatPublicApiModelsDataDataStatus.  # noqa: E501


        :return: The data_type of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CodatPublicApiModelsDataDataStatus.


        :param data_type: The data_type of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def last_successful_sync(self):
        """Gets the last_successful_sync of this CodatPublicApiModelsDataDataStatus.  # noqa: E501


        :return: The last_successful_sync of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_successful_sync

    @last_successful_sync.setter
    def last_successful_sync(self, last_successful_sync):
        """Sets the last_successful_sync of this CodatPublicApiModelsDataDataStatus.


        :param last_successful_sync: The last_successful_sync of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :type: datetime
        """

        self._last_successful_sync = last_successful_sync

    @property
    def current_status(self):
        """Gets the current_status of this CodatPublicApiModelsDataDataStatus.  # noqa: E501


        :return: The current_status of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this CodatPublicApiModelsDataDataStatus.


        :param current_status: The current_status of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    @property
    def latest_sync_id(self):
        """Gets the latest_sync_id of this CodatPublicApiModelsDataDataStatus.  # noqa: E501


        :return: The latest_sync_id of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :rtype: str
        """
        return self._latest_sync_id

    @latest_sync_id.setter
    def latest_sync_id(self, latest_sync_id):
        """Sets the latest_sync_id of this CodatPublicApiModelsDataDataStatus.


        :param latest_sync_id: The latest_sync_id of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :type: str
        """

        self._latest_sync_id = latest_sync_id

    @property
    def latest_successful_sync_id(self):
        """Gets the latest_successful_sync_id of this CodatPublicApiModelsDataDataStatus.  # noqa: E501


        :return: The latest_successful_sync_id of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :rtype: str
        """
        return self._latest_successful_sync_id

    @latest_successful_sync_id.setter
    def latest_successful_sync_id(self, latest_successful_sync_id):
        """Sets the latest_successful_sync_id of this CodatPublicApiModelsDataDataStatus.


        :param latest_successful_sync_id: The latest_successful_sync_id of this CodatPublicApiModelsDataDataStatus.  # noqa: E501
        :type: str
        """

        self._latest_successful_sync_id = latest_successful_sync_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatPublicApiModelsDataDataStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatPublicApiModelsDataDataStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatClientsApiClientContractSupportedDataPath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supported_data_path_id': 'int',
        'supported_data_path_name': 'str',
        'source_guid': 'str',
        'source_name': 'str',
        'source_type': 'str',
        'source_display_name': 'str',
        'integration_guid': 'str',
        'integration_name': 'str',
        'is_offline_connector': 'bool',
        'service_ref': 'str',
        'requires_credentials': 'bool',
        'integration_display_name': 'str',
        'integration_type': 'str'
    }

    attribute_map = {
        'supported_data_path_id': 'supportedDataPathId',
        'supported_data_path_name': 'supportedDataPathName',
        'source_guid': 'sourceGuid',
        'source_name': 'sourceName',
        'source_type': 'sourceType',
        'source_display_name': 'sourceDisplayName',
        'integration_guid': 'integrationGuid',
        'integration_name': 'integrationName',
        'is_offline_connector': 'isOfflineConnector',
        'service_ref': 'serviceRef',
        'requires_credentials': 'requiresCredentials',
        'integration_display_name': 'integrationDisplayName',
        'integration_type': 'integrationType'
    }

    def __init__(self, supported_data_path_id=None, supported_data_path_name=None, source_guid=None, source_name=None, source_type=None, source_display_name=None, integration_guid=None, integration_name=None, is_offline_connector=None, service_ref=None, requires_credentials=None, integration_display_name=None, integration_type=None):  # noqa: E501
        """CodatClientsApiClientContractSupportedDataPath - a model defined in Swagger"""  # noqa: E501
        self._supported_data_path_id = None
        self._supported_data_path_name = None
        self._source_guid = None
        self._source_name = None
        self._source_type = None
        self._source_display_name = None
        self._integration_guid = None
        self._integration_name = None
        self._is_offline_connector = None
        self._service_ref = None
        self._requires_credentials = None
        self._integration_display_name = None
        self._integration_type = None
        self.discriminator = None
        if supported_data_path_id is not None:
            self.supported_data_path_id = supported_data_path_id
        if supported_data_path_name is not None:
            self.supported_data_path_name = supported_data_path_name
        if source_guid is not None:
            self.source_guid = source_guid
        if source_name is not None:
            self.source_name = source_name
        if source_type is not None:
            self.source_type = source_type
        if source_display_name is not None:
            self.source_display_name = source_display_name
        if integration_guid is not None:
            self.integration_guid = integration_guid
        if integration_name is not None:
            self.integration_name = integration_name
        if is_offline_connector is not None:
            self.is_offline_connector = is_offline_connector
        if service_ref is not None:
            self.service_ref = service_ref
        if requires_credentials is not None:
            self.requires_credentials = requires_credentials
        if integration_display_name is not None:
            self.integration_display_name = integration_display_name
        if integration_type is not None:
            self.integration_type = integration_type

    @property
    def supported_data_path_id(self):
        """Gets the supported_data_path_id of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The supported_data_path_id of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: int
        """
        return self._supported_data_path_id

    @supported_data_path_id.setter
    def supported_data_path_id(self, supported_data_path_id):
        """Sets the supported_data_path_id of this CodatClientsApiClientContractSupportedDataPath.


        :param supported_data_path_id: The supported_data_path_id of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: int
        """

        self._supported_data_path_id = supported_data_path_id

    @property
    def supported_data_path_name(self):
        """Gets the supported_data_path_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The supported_data_path_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._supported_data_path_name

    @supported_data_path_name.setter
    def supported_data_path_name(self, supported_data_path_name):
        """Sets the supported_data_path_name of this CodatClientsApiClientContractSupportedDataPath.


        :param supported_data_path_name: The supported_data_path_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._supported_data_path_name = supported_data_path_name

    @property
    def source_guid(self):
        """Gets the source_guid of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The source_guid of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._source_guid

    @source_guid.setter
    def source_guid(self, source_guid):
        """Sets the source_guid of this CodatClientsApiClientContractSupportedDataPath.


        :param source_guid: The source_guid of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._source_guid = source_guid

    @property
    def source_name(self):
        """Gets the source_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The source_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this CodatClientsApiClientContractSupportedDataPath.


        :param source_name: The source_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def source_type(self):
        """Gets the source_type of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The source_type of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CodatClientsApiClientContractSupportedDataPath.


        :param source_type: The source_type of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source_display_name(self):
        """Gets the source_display_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The source_display_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._source_display_name

    @source_display_name.setter
    def source_display_name(self, source_display_name):
        """Sets the source_display_name of this CodatClientsApiClientContractSupportedDataPath.


        :param source_display_name: The source_display_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._source_display_name = source_display_name

    @property
    def integration_guid(self):
        """Gets the integration_guid of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The integration_guid of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._integration_guid

    @integration_guid.setter
    def integration_guid(self, integration_guid):
        """Sets the integration_guid of this CodatClientsApiClientContractSupportedDataPath.


        :param integration_guid: The integration_guid of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._integration_guid = integration_guid

    @property
    def integration_name(self):
        """Gets the integration_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The integration_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._integration_name

    @integration_name.setter
    def integration_name(self, integration_name):
        """Sets the integration_name of this CodatClientsApiClientContractSupportedDataPath.


        :param integration_name: The integration_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._integration_name = integration_name

    @property
    def is_offline_connector(self):
        """Gets the is_offline_connector of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The is_offline_connector of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: bool
        """
        return self._is_offline_connector

    @is_offline_connector.setter
    def is_offline_connector(self, is_offline_connector):
        """Sets the is_offline_connector of this CodatClientsApiClientContractSupportedDataPath.


        :param is_offline_connector: The is_offline_connector of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: bool
        """

        self._is_offline_connector = is_offline_connector

    @property
    def service_ref(self):
        """Gets the service_ref of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The service_ref of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._service_ref

    @service_ref.setter
    def service_ref(self, service_ref):
        """Sets the service_ref of this CodatClientsApiClientContractSupportedDataPath.


        :param service_ref: The service_ref of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._service_ref = service_ref

    @property
    def requires_credentials(self):
        """Gets the requires_credentials of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The requires_credentials of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: bool
        """
        return self._requires_credentials

    @requires_credentials.setter
    def requires_credentials(self, requires_credentials):
        """Sets the requires_credentials of this CodatClientsApiClientContractSupportedDataPath.


        :param requires_credentials: The requires_credentials of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: bool
        """

        self._requires_credentials = requires_credentials

    @property
    def integration_display_name(self):
        """Gets the integration_display_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The integration_display_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._integration_display_name

    @integration_display_name.setter
    def integration_display_name(self, integration_display_name):
        """Sets the integration_display_name of this CodatClientsApiClientContractSupportedDataPath.


        :param integration_display_name: The integration_display_name of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._integration_display_name = integration_display_name

    @property
    def integration_type(self):
        """Gets the integration_type of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501


        :return: The integration_type of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this CodatClientsApiClientContractSupportedDataPath.


        :param integration_type: The integration_type of this CodatClientsApiClientContractSupportedDataPath.  # noqa: E501
        :type: str
        """

        self._integration_type = integration_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatClientsApiClientContractSupportedDataPath, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatClientsApiClientContractSupportedDataPath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

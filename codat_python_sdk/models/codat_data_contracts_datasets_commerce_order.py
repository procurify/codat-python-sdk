# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsCommerceOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'order_number': 'str',
        'country': 'str',
        'currency': 'str',
        'created_date': 'datetime',
        'closed_date': 'datetime',
        'total_amount': 'float',
        'total_refund': 'float',
        'total_tax_amount': 'float',
        'total_discount': 'float',
        'total_gratuity': 'float',
        'order_line_items': 'list[CodatDataContractsDatasetsCommerceOrderLineItem]',
        'payments': 'list[CodatDataContractsDatasetsCommercePaymentRef]',
        'service_charges': 'list[CodatDataContractsDatasetsCommerceServiceCharge]',
        'customer_ref': 'CodatDataContractsDatasetsCommerceCustomerRef',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'order_number': 'orderNumber',
        'country': 'country',
        'currency': 'currency',
        'created_date': 'createdDate',
        'closed_date': 'closedDate',
        'total_amount': 'totalAmount',
        'total_refund': 'totalRefund',
        'total_tax_amount': 'totalTaxAmount',
        'total_discount': 'totalDiscount',
        'total_gratuity': 'totalGratuity',
        'order_line_items': 'orderLineItems',
        'payments': 'payments',
        'service_charges': 'serviceCharges',
        'customer_ref': 'customerRef',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate'
    }

    def __init__(self, id=None, order_number=None, country=None, currency=None, created_date=None, closed_date=None, total_amount=None, total_refund=None, total_tax_amount=None, total_discount=None, total_gratuity=None, order_line_items=None, payments=None, service_charges=None, customer_ref=None, modified_date=None, source_modified_date=None):  # noqa: E501
        """CodatDataContractsDatasetsCommerceOrder - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._order_number = None
        self._country = None
        self._currency = None
        self._created_date = None
        self._closed_date = None
        self._total_amount = None
        self._total_refund = None
        self._total_tax_amount = None
        self._total_discount = None
        self._total_gratuity = None
        self._order_line_items = None
        self._payments = None
        self._service_charges = None
        self._customer_ref = None
        self._modified_date = None
        self._source_modified_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if order_number is not None:
            self.order_number = order_number
        if country is not None:
            self.country = country
        if currency is not None:
            self.currency = currency
        if created_date is not None:
            self.created_date = created_date
        if closed_date is not None:
            self.closed_date = closed_date
        if total_amount is not None:
            self.total_amount = total_amount
        if total_refund is not None:
            self.total_refund = total_refund
        if total_tax_amount is not None:
            self.total_tax_amount = total_tax_amount
        if total_discount is not None:
            self.total_discount = total_discount
        if total_gratuity is not None:
            self.total_gratuity = total_gratuity
        if order_line_items is not None:
            self.order_line_items = order_line_items
        if payments is not None:
            self.payments = payments
        if service_charges is not None:
            self.service_charges = service_charges
        if customer_ref is not None:
            self.customer_ref = customer_ref
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsCommerceOrder.


        :param id: The id of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def order_number(self):
        """Gets the order_number of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The order_number of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this CodatDataContractsDatasetsCommerceOrder.


        :param order_number: The order_number of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def country(self):
        """Gets the country of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The country of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CodatDataContractsDatasetsCommerceOrder.


        :param country: The country of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The currency of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CodatDataContractsDatasetsCommerceOrder.


        :param currency: The currency of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def created_date(self):
        """Gets the created_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The created_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CodatDataContractsDatasetsCommerceOrder.


        :param created_date: The created_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def closed_date(self):
        """Gets the closed_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The closed_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this CodatDataContractsDatasetsCommerceOrder.


        :param closed_date: The closed_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: datetime
        """

        self._closed_date = closed_date

    @property
    def total_amount(self):
        """Gets the total_amount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The total_amount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CodatDataContractsDatasetsCommerceOrder.


        :param total_amount: The total_amount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def total_refund(self):
        """Gets the total_refund of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The total_refund of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: float
        """
        return self._total_refund

    @total_refund.setter
    def total_refund(self, total_refund):
        """Sets the total_refund of this CodatDataContractsDatasetsCommerceOrder.


        :param total_refund: The total_refund of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: float
        """

        self._total_refund = total_refund

    @property
    def total_tax_amount(self):
        """Gets the total_tax_amount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The total_tax_amount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_amount

    @total_tax_amount.setter
    def total_tax_amount(self, total_tax_amount):
        """Sets the total_tax_amount of this CodatDataContractsDatasetsCommerceOrder.


        :param total_tax_amount: The total_tax_amount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: float
        """

        self._total_tax_amount = total_tax_amount

    @property
    def total_discount(self):
        """Gets the total_discount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The total_discount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this CodatDataContractsDatasetsCommerceOrder.


        :param total_discount: The total_discount of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: float
        """

        self._total_discount = total_discount

    @property
    def total_gratuity(self):
        """Gets the total_gratuity of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The total_gratuity of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: float
        """
        return self._total_gratuity

    @total_gratuity.setter
    def total_gratuity(self, total_gratuity):
        """Sets the total_gratuity of this CodatDataContractsDatasetsCommerceOrder.


        :param total_gratuity: The total_gratuity of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: float
        """

        self._total_gratuity = total_gratuity

    @property
    def order_line_items(self):
        """Gets the order_line_items of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The order_line_items of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsCommerceOrderLineItem]
        """
        return self._order_line_items

    @order_line_items.setter
    def order_line_items(self, order_line_items):
        """Sets the order_line_items of this CodatDataContractsDatasetsCommerceOrder.


        :param order_line_items: The order_line_items of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: list[CodatDataContractsDatasetsCommerceOrderLineItem]
        """

        self._order_line_items = order_line_items

    @property
    def payments(self):
        """Gets the payments of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The payments of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsCommercePaymentRef]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this CodatDataContractsDatasetsCommerceOrder.


        :param payments: The payments of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: list[CodatDataContractsDatasetsCommercePaymentRef]
        """

        self._payments = payments

    @property
    def service_charges(self):
        """Gets the service_charges of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The service_charges of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsCommerceServiceCharge]
        """
        return self._service_charges

    @service_charges.setter
    def service_charges(self, service_charges):
        """Sets the service_charges of this CodatDataContractsDatasetsCommerceOrder.


        :param service_charges: The service_charges of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: list[CodatDataContractsDatasetsCommerceServiceCharge]
        """

        self._service_charges = service_charges

    @property
    def customer_ref(self):
        """Gets the customer_ref of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The customer_ref of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: CodatDataContractsDatasetsCommerceCustomerRef
        """
        return self._customer_ref

    @customer_ref.setter
    def customer_ref(self, customer_ref):
        """Sets the customer_ref of this CodatDataContractsDatasetsCommerceOrder.


        :param customer_ref: The customer_ref of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: CodatDataContractsDatasetsCommerceCustomerRef
        """

        self._customer_ref = customer_ref

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsCommerceOrder.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsCommerceOrder.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsCommerceOrder.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsCommerceOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsCommerceOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

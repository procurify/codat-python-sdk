# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsBankStatementAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_name': 'str',
        'from_date': 'datetime',
        'to_date': 'datetime',
        'nominal_code': 'str',
        'sort_code': 'str',
        'account_number': 'str',
        'iban': 'str',
        'currency': 'str',
        'balance': 'float',
        'available_balance': 'float',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime',
        'overdraft_limit': 'float',
        'institution': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_name': 'accountName',
        'from_date': 'fromDate',
        'to_date': 'toDate',
        'nominal_code': 'nominalCode',
        'sort_code': 'sortCode',
        'account_number': 'accountNumber',
        'iban': 'iban',
        'currency': 'currency',
        'balance': 'balance',
        'available_balance': 'availableBalance',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate',
        'overdraft_limit': 'overdraftLimit',
        'institution': 'institution'
    }

    def __init__(self, id=None, account_name=None, from_date=None, to_date=None, nominal_code=None, sort_code=None, account_number=None, iban=None, currency=None, balance=None, available_balance=None, modified_date=None, source_modified_date=None, overdraft_limit=None, institution=None):  # noqa: E501
        """CodatDataContractsDatasetsBankStatementAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_name = None
        self._from_date = None
        self._to_date = None
        self._nominal_code = None
        self._sort_code = None
        self._account_number = None
        self._iban = None
        self._currency = None
        self._balance = None
        self._available_balance = None
        self._modified_date = None
        self._source_modified_date = None
        self._overdraft_limit = None
        self._institution = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_name is not None:
            self.account_name = account_name
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if nominal_code is not None:
            self.nominal_code = nominal_code
        if sort_code is not None:
            self.sort_code = sort_code
        if account_number is not None:
            self.account_number = account_number
        if iban is not None:
            self.iban = iban
        if currency is not None:
            self.currency = currency
        if balance is not None:
            self.balance = balance
        if available_balance is not None:
            self.available_balance = available_balance
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date
        if overdraft_limit is not None:
            self.overdraft_limit = overdraft_limit
        if institution is not None:
            self.institution = institution

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsBankStatementAccount.


        :param id: The id of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_name(self):
        """Gets the account_name of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The account_name of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this CodatDataContractsDatasetsBankStatementAccount.


        :param account_name: The account_name of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def from_date(self):
        """Gets the from_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The from_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this CodatDataContractsDatasetsBankStatementAccount.


        :param from_date: The from_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The to_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this CodatDataContractsDatasetsBankStatementAccount.


        :param to_date: The to_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    @property
    def nominal_code(self):
        """Gets the nominal_code of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The nominal_code of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._nominal_code

    @nominal_code.setter
    def nominal_code(self, nominal_code):
        """Sets the nominal_code of this CodatDataContractsDatasetsBankStatementAccount.


        :param nominal_code: The nominal_code of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._nominal_code = nominal_code

    @property
    def sort_code(self):
        """Gets the sort_code of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The sort_code of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this CodatDataContractsDatasetsBankStatementAccount.


        :param sort_code: The sort_code of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._sort_code = sort_code

    @property
    def account_number(self):
        """Gets the account_number of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The account_number of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CodatDataContractsDatasetsBankStatementAccount.


        :param account_number: The account_number of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def iban(self):
        """Gets the iban of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The iban of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this CodatDataContractsDatasetsBankStatementAccount.


        :param iban: The iban of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def currency(self):
        """Gets the currency of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The currency of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CodatDataContractsDatasetsBankStatementAccount.


        :param currency: The currency of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def balance(self):
        """Gets the balance of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The balance of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CodatDataContractsDatasetsBankStatementAccount.


        :param balance: The balance of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def available_balance(self):
        """Gets the available_balance of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The available_balance of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this CodatDataContractsDatasetsBankStatementAccount.


        :param available_balance: The available_balance of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: float
        """

        self._available_balance = available_balance

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsBankStatementAccount.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsBankStatementAccount.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    @property
    def overdraft_limit(self):
        """Gets the overdraft_limit of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The overdraft_limit of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: float
        """
        return self._overdraft_limit

    @overdraft_limit.setter
    def overdraft_limit(self, overdraft_limit):
        """Sets the overdraft_limit of this CodatDataContractsDatasetsBankStatementAccount.


        :param overdraft_limit: The overdraft_limit of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: float
        """

        self._overdraft_limit = overdraft_limit

    @property
    def institution(self):
        """Gets the institution of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501


        :return: The institution of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this CodatDataContractsDatasetsBankStatementAccount.


        :param institution: The institution of this CodatDataContractsDatasetsBankStatementAccount.  # noqa: E501
        :type: str
        """

        self._institution = institution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsBankStatementAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsBankStatementAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

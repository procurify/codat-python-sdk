# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'nominal_code': 'str',
        'name': 'str',
        'description': 'str',
        'fully_qualified_category': 'str',
        'fully_qualified_name': 'str',
        'currency': 'str',
        'current_balance': 'float',
        'type': 'CodatDataContractsDatasetsAccountType',
        'status': 'CodatDataContractsDatasetsAccountStatus',
        'is_bank_account': 'bool',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime',
        'valid_datatype_links': 'list[CodatDataContractsDatasetsValidDatatypeLinks]'
    }

    attribute_map = {
        'id': 'id',
        'nominal_code': 'nominalCode',
        'name': 'name',
        'description': 'description',
        'fully_qualified_category': 'fullyQualifiedCategory',
        'fully_qualified_name': 'fullyQualifiedName',
        'currency': 'currency',
        'current_balance': 'currentBalance',
        'type': 'type',
        'status': 'status',
        'is_bank_account': 'isBankAccount',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate',
        'valid_datatype_links': 'validDatatypeLinks'
    }

    def __init__(self, id=None, nominal_code=None, name=None, description=None, fully_qualified_category=None, fully_qualified_name=None, currency=None, current_balance=None, type=None, status=None, is_bank_account=None, modified_date=None, source_modified_date=None, valid_datatype_links=None):  # noqa: E501
        """CodatDataContractsDatasetsAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._nominal_code = None
        self._name = None
        self._description = None
        self._fully_qualified_category = None
        self._fully_qualified_name = None
        self._currency = None
        self._current_balance = None
        self._type = None
        self._status = None
        self._is_bank_account = None
        self._modified_date = None
        self._source_modified_date = None
        self._valid_datatype_links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if nominal_code is not None:
            self.nominal_code = nominal_code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if fully_qualified_category is not None:
            self.fully_qualified_category = fully_qualified_category
        if fully_qualified_name is not None:
            self.fully_qualified_name = fully_qualified_name
        if currency is not None:
            self.currency = currency
        if current_balance is not None:
            self.current_balance = current_balance
        self.type = type
        self.status = status
        self.is_bank_account = is_bank_account
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date
        if valid_datatype_links is not None:
            self.valid_datatype_links = valid_datatype_links

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsAccount.


        :param id: The id of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def nominal_code(self):
        """Gets the nominal_code of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The nominal_code of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: str
        """
        return self._nominal_code

    @nominal_code.setter
    def nominal_code(self, nominal_code):
        """Sets the nominal_code of this CodatDataContractsDatasetsAccount.


        :param nominal_code: The nominal_code of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: str
        """

        self._nominal_code = nominal_code

    @property
    def name(self):
        """Gets the name of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The name of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatDataContractsDatasetsAccount.


        :param name: The name of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The description of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodatDataContractsDatasetsAccount.


        :param description: The description of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fully_qualified_category(self):
        """Gets the fully_qualified_category of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The fully_qualified_category of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: str
        """
        return self._fully_qualified_category

    @fully_qualified_category.setter
    def fully_qualified_category(self, fully_qualified_category):
        """Sets the fully_qualified_category of this CodatDataContractsDatasetsAccount.


        :param fully_qualified_category: The fully_qualified_category of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: str
        """

        self._fully_qualified_category = fully_qualified_category

    @property
    def fully_qualified_name(self):
        """Gets the fully_qualified_name of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The fully_qualified_name of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: str
        """
        return self._fully_qualified_name

    @fully_qualified_name.setter
    def fully_qualified_name(self, fully_qualified_name):
        """Sets the fully_qualified_name of this CodatDataContractsDatasetsAccount.


        :param fully_qualified_name: The fully_qualified_name of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: str
        """

        self._fully_qualified_name = fully_qualified_name

    @property
    def currency(self):
        """Gets the currency of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The currency of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CodatDataContractsDatasetsAccount.


        :param currency: The currency of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def current_balance(self):
        """Gets the current_balance of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The current_balance of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this CodatDataContractsDatasetsAccount.


        :param current_balance: The current_balance of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: float
        """

        self._current_balance = current_balance

    @property
    def type(self):
        """Gets the type of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The type of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: CodatDataContractsDatasetsAccountType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodatDataContractsDatasetsAccount.


        :param type: The type of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: CodatDataContractsDatasetsAccountType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def status(self):
        """Gets the status of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The status of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: CodatDataContractsDatasetsAccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodatDataContractsDatasetsAccount.


        :param status: The status of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: CodatDataContractsDatasetsAccountStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def is_bank_account(self):
        """Gets the is_bank_account of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The is_bank_account of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_bank_account

    @is_bank_account.setter
    def is_bank_account(self, is_bank_account):
        """Sets the is_bank_account of this CodatDataContractsDatasetsAccount.


        :param is_bank_account: The is_bank_account of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: bool
        """
        if is_bank_account is None:
            raise ValueError("Invalid value for `is_bank_account`, must not be `None`")  # noqa: E501

        self._is_bank_account = is_bank_account

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsAccount.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsAccount.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    @property
    def valid_datatype_links(self):
        """Gets the valid_datatype_links of this CodatDataContractsDatasetsAccount.  # noqa: E501


        :return: The valid_datatype_links of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsValidDatatypeLinks]
        """
        return self._valid_datatype_links

    @valid_datatype_links.setter
    def valid_datatype_links(self, valid_datatype_links):
        """Sets the valid_datatype_links of this CodatDataContractsDatasetsAccount.


        :param valid_datatype_links: The valid_datatype_links of this CodatDataContractsDatasetsAccount.  # noqa: E501
        :type: list[CodatDataContractsDatasetsValidDatatypeLinks]
        """

        self._valid_datatype_links = valid_datatype_links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsInvoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'invoice_number': 'str',
        'customer_ref': 'CodatDataContractsDatasetsCustomerRef',
        'issue_date': 'datetime',
        'due_date': 'datetime',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime',
        'paid_on_date': 'datetime',
        'currency': 'str',
        'currency_rate': 'float',
        'line_items': 'list[CodatDataContractsDatasetsInvoiceLineItem]',
        'payment_allocations': 'list[CodatDataContractsDatasetsInvoicePaymentAllocation]',
        'withholding_tax': 'list[CodatDataContractsDatasetsWithholdingTax]',
        'total_discount': 'float',
        'sub_total': 'float',
        'total_tax_amount': 'float',
        'total_amount': 'float',
        'amount_due': 'float',
        'discount_percentage': 'float',
        'status': 'CodatDataContractsDatasetsInvoiceStatus',
        'note': 'str'
    }

    attribute_map = {
        'id': 'id',
        'invoice_number': 'invoiceNumber',
        'customer_ref': 'customerRef',
        'issue_date': 'issueDate',
        'due_date': 'dueDate',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate',
        'paid_on_date': 'paidOnDate',
        'currency': 'currency',
        'currency_rate': 'currencyRate',
        'line_items': 'lineItems',
        'payment_allocations': 'paymentAllocations',
        'withholding_tax': 'withholdingTax',
        'total_discount': 'totalDiscount',
        'sub_total': 'subTotal',
        'total_tax_amount': 'totalTaxAmount',
        'total_amount': 'totalAmount',
        'amount_due': 'amountDue',
        'discount_percentage': 'discountPercentage',
        'status': 'status',
        'note': 'note'
    }

    def __init__(self, id=None, invoice_number=None, customer_ref=None, issue_date=None, due_date=None, modified_date=None, source_modified_date=None, paid_on_date=None, currency=None, currency_rate=None, line_items=None, payment_allocations=None, withholding_tax=None, total_discount=None, sub_total=None, total_tax_amount=None, total_amount=None, amount_due=None, discount_percentage=None, status=None, note=None):  # noqa: E501
        """CodatDataContractsDatasetsInvoice - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._invoice_number = None
        self._customer_ref = None
        self._issue_date = None
        self._due_date = None
        self._modified_date = None
        self._source_modified_date = None
        self._paid_on_date = None
        self._currency = None
        self._currency_rate = None
        self._line_items = None
        self._payment_allocations = None
        self._withholding_tax = None
        self._total_discount = None
        self._sub_total = None
        self._total_tax_amount = None
        self._total_amount = None
        self._amount_due = None
        self._discount_percentage = None
        self._status = None
        self._note = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if customer_ref is not None:
            self.customer_ref = customer_ref
        self.issue_date = issue_date
        if due_date is not None:
            self.due_date = due_date
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date
        if paid_on_date is not None:
            self.paid_on_date = paid_on_date
        if currency is not None:
            self.currency = currency
        if currency_rate is not None:
            self.currency_rate = currency_rate
        if line_items is not None:
            self.line_items = line_items
        if payment_allocations is not None:
            self.payment_allocations = payment_allocations
        if withholding_tax is not None:
            self.withholding_tax = withholding_tax
        if total_discount is not None:
            self.total_discount = total_discount
        if sub_total is not None:
            self.sub_total = sub_total
        self.total_tax_amount = total_tax_amount
        self.total_amount = total_amount
        self.amount_due = amount_due
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        self.status = status
        if note is not None:
            self.note = note

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsInvoice.


        :param id: The id of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The invoice_number of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this CodatDataContractsDatasetsInvoice.


        :param invoice_number: The invoice_number of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def customer_ref(self):
        """Gets the customer_ref of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The customer_ref of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: CodatDataContractsDatasetsCustomerRef
        """
        return self._customer_ref

    @customer_ref.setter
    def customer_ref(self, customer_ref):
        """Sets the customer_ref of this CodatDataContractsDatasetsInvoice.


        :param customer_ref: The customer_ref of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: CodatDataContractsDatasetsCustomerRef
        """

        self._customer_ref = customer_ref

    @property
    def issue_date(self):
        """Gets the issue_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The issue_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this CodatDataContractsDatasetsInvoice.


        :param issue_date: The issue_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: datetime
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")  # noqa: E501

        self._issue_date = issue_date

    @property
    def due_date(self):
        """Gets the due_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The due_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this CodatDataContractsDatasetsInvoice.


        :param due_date: The due_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsInvoice.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsInvoice.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    @property
    def paid_on_date(self):
        """Gets the paid_on_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The paid_on_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._paid_on_date

    @paid_on_date.setter
    def paid_on_date(self, paid_on_date):
        """Sets the paid_on_date of this CodatDataContractsDatasetsInvoice.


        :param paid_on_date: The paid_on_date of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: datetime
        """

        self._paid_on_date = paid_on_date

    @property
    def currency(self):
        """Gets the currency of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The currency of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CodatDataContractsDatasetsInvoice.


        :param currency: The currency of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_rate(self):
        """Gets the currency_rate of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The currency_rate of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this CodatDataContractsDatasetsInvoice.


        :param currency_rate: The currency_rate of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: float
        """

        self._currency_rate = currency_rate

    @property
    def line_items(self):
        """Gets the line_items of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The line_items of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsInvoiceLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this CodatDataContractsDatasetsInvoice.


        :param line_items: The line_items of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: list[CodatDataContractsDatasetsInvoiceLineItem]
        """

        self._line_items = line_items

    @property
    def payment_allocations(self):
        """Gets the payment_allocations of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The payment_allocations of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsInvoicePaymentAllocation]
        """
        return self._payment_allocations

    @payment_allocations.setter
    def payment_allocations(self, payment_allocations):
        """Sets the payment_allocations of this CodatDataContractsDatasetsInvoice.


        :param payment_allocations: The payment_allocations of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: list[CodatDataContractsDatasetsInvoicePaymentAllocation]
        """

        self._payment_allocations = payment_allocations

    @property
    def withholding_tax(self):
        """Gets the withholding_tax of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The withholding_tax of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsWithholdingTax]
        """
        return self._withholding_tax

    @withholding_tax.setter
    def withholding_tax(self, withholding_tax):
        """Sets the withholding_tax of this CodatDataContractsDatasetsInvoice.


        :param withholding_tax: The withholding_tax of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: list[CodatDataContractsDatasetsWithholdingTax]
        """

        self._withholding_tax = withholding_tax

    @property
    def total_discount(self):
        """Gets the total_discount of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The total_discount of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this CodatDataContractsDatasetsInvoice.


        :param total_discount: The total_discount of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: float
        """

        self._total_discount = total_discount

    @property
    def sub_total(self):
        """Gets the sub_total of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The sub_total of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this CodatDataContractsDatasetsInvoice.


        :param sub_total: The sub_total of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: float
        """

        self._sub_total = sub_total

    @property
    def total_tax_amount(self):
        """Gets the total_tax_amount of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The total_tax_amount of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_amount

    @total_tax_amount.setter
    def total_tax_amount(self, total_tax_amount):
        """Sets the total_tax_amount of this CodatDataContractsDatasetsInvoice.


        :param total_tax_amount: The total_tax_amount of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: float
        """
        if total_tax_amount is None:
            raise ValueError("Invalid value for `total_tax_amount`, must not be `None`")  # noqa: E501

        self._total_tax_amount = total_tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The total_amount of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CodatDataContractsDatasetsInvoice.


        :param total_amount: The total_amount of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: float
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    @property
    def amount_due(self):
        """Gets the amount_due of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The amount_due of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: float
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this CodatDataContractsDatasetsInvoice.


        :param amount_due: The amount_due of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: float
        """
        if amount_due is None:
            raise ValueError("Invalid value for `amount_due`, must not be `None`")  # noqa: E501

        self._amount_due = amount_due

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The discount_percentage of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this CodatDataContractsDatasetsInvoice.


        :param discount_percentage: The discount_percentage of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def status(self):
        """Gets the status of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The status of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: CodatDataContractsDatasetsInvoiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodatDataContractsDatasetsInvoice.


        :param status: The status of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: CodatDataContractsDatasetsInvoiceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def note(self):
        """Gets the note of this CodatDataContractsDatasetsInvoice.  # noqa: E501


        :return: The note of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CodatDataContractsDatasetsInvoice.


        :param note: The note of this CodatDataContractsDatasetsInvoice.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsInvoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsInvoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

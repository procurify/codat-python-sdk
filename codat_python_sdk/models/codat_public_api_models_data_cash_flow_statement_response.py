# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatPublicApiModelsDataCashFlowStatementResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reports': 'list[CodatDataContractsDatasetsCashFlowStatement]',
        'report_basis': 'CodatDataContractsDatasetsCashFlowStatementReportingBasis',
        'report_input': 'CodatDataContractsDatasetsCashFlowStatementReportingData',
        'currency': 'str',
        'most_recent_available_month': 'datetime',
        'earliest_available_month': 'datetime'
    }

    attribute_map = {
        'reports': 'reports',
        'report_basis': 'reportBasis',
        'report_input': 'reportInput',
        'currency': 'currency',
        'most_recent_available_month': 'mostRecentAvailableMonth',
        'earliest_available_month': 'earliestAvailableMonth'
    }

    def __init__(self, reports=None, report_basis=None, report_input=None, currency=None, most_recent_available_month=None, earliest_available_month=None):  # noqa: E501
        """CodatPublicApiModelsDataCashFlowStatementResponse - a model defined in Swagger"""  # noqa: E501
        self._reports = None
        self._report_basis = None
        self._report_input = None
        self._currency = None
        self._most_recent_available_month = None
        self._earliest_available_month = None
        self.discriminator = None
        self.reports = reports
        self.report_basis = report_basis
        self.report_input = report_input
        self.currency = currency
        self.most_recent_available_month = most_recent_available_month
        self.earliest_available_month = earliest_available_month

    @property
    def reports(self):
        """Gets the reports of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501


        :return: The reports of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsCashFlowStatement]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this CodatPublicApiModelsDataCashFlowStatementResponse.


        :param reports: The reports of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :type: list[CodatDataContractsDatasetsCashFlowStatement]
        """
        if reports is None:
            raise ValueError("Invalid value for `reports`, must not be `None`")  # noqa: E501

        self._reports = reports

    @property
    def report_basis(self):
        """Gets the report_basis of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501


        :return: The report_basis of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :rtype: CodatDataContractsDatasetsCashFlowStatementReportingBasis
        """
        return self._report_basis

    @report_basis.setter
    def report_basis(self, report_basis):
        """Sets the report_basis of this CodatPublicApiModelsDataCashFlowStatementResponse.


        :param report_basis: The report_basis of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :type: CodatDataContractsDatasetsCashFlowStatementReportingBasis
        """
        if report_basis is None:
            raise ValueError("Invalid value for `report_basis`, must not be `None`")  # noqa: E501

        self._report_basis = report_basis

    @property
    def report_input(self):
        """Gets the report_input of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501


        :return: The report_input of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :rtype: CodatDataContractsDatasetsCashFlowStatementReportingData
        """
        return self._report_input

    @report_input.setter
    def report_input(self, report_input):
        """Sets the report_input of this CodatPublicApiModelsDataCashFlowStatementResponse.


        :param report_input: The report_input of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :type: CodatDataContractsDatasetsCashFlowStatementReportingData
        """
        if report_input is None:
            raise ValueError("Invalid value for `report_input`, must not be `None`")  # noqa: E501

        self._report_input = report_input

    @property
    def currency(self):
        """Gets the currency of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501


        :return: The currency of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CodatPublicApiModelsDataCashFlowStatementResponse.


        :param currency: The currency of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def most_recent_available_month(self):
        """Gets the most_recent_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501


        :return: The most_recent_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._most_recent_available_month

    @most_recent_available_month.setter
    def most_recent_available_month(self, most_recent_available_month):
        """Sets the most_recent_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.


        :param most_recent_available_month: The most_recent_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :type: datetime
        """
        if most_recent_available_month is None:
            raise ValueError("Invalid value for `most_recent_available_month`, must not be `None`")  # noqa: E501

        self._most_recent_available_month = most_recent_available_month

    @property
    def earliest_available_month(self):
        """Gets the earliest_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501


        :return: The earliest_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._earliest_available_month

    @earliest_available_month.setter
    def earliest_available_month(self, earliest_available_month):
        """Sets the earliest_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.


        :param earliest_available_month: The earliest_available_month of this CodatPublicApiModelsDataCashFlowStatementResponse.  # noqa: E501
        :type: datetime
        """
        if earliest_available_month is None:
            raise ValueError("Invalid value for `earliest_available_month`, must not be `None`")  # noqa: E501

        self._earliest_available_month = earliest_available_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatPublicApiModelsDataCashFlowStatementResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatPublicApiModelsDataCashFlowStatementResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsAgedDebtorOutstanding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'customer_name': 'str',
        'aged_currency_outstanding': 'list[CodatDataContractsDatasetsAgedCurrencyOutstanding]'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'customer_name': 'customerName',
        'aged_currency_outstanding': 'agedCurrencyOutstanding'
    }

    def __init__(self, customer_id=None, customer_name=None, aged_currency_outstanding=None):  # noqa: E501
        """CodatDataContractsDatasetsAgedDebtorOutstanding - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._customer_name = None
        self._aged_currency_outstanding = None
        self.discriminator = None
        if customer_id is not None:
            self.customer_id = customer_id
        if customer_name is not None:
            self.customer_name = customer_name
        if aged_currency_outstanding is not None:
            self.aged_currency_outstanding = aged_currency_outstanding

    @property
    def customer_id(self):
        """Gets the customer_id of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501


        :return: The customer_id of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CodatDataContractsDatasetsAgedDebtorOutstanding.


        :param customer_id: The customer_id of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501


        :return: The customer_name of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this CodatDataContractsDatasetsAgedDebtorOutstanding.


        :param customer_name: The customer_name of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def aged_currency_outstanding(self):
        """Gets the aged_currency_outstanding of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501


        :return: The aged_currency_outstanding of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsAgedCurrencyOutstanding]
        """
        return self._aged_currency_outstanding

    @aged_currency_outstanding.setter
    def aged_currency_outstanding(self, aged_currency_outstanding):
        """Sets the aged_currency_outstanding of this CodatDataContractsDatasetsAgedDebtorOutstanding.


        :param aged_currency_outstanding: The aged_currency_outstanding of this CodatDataContractsDatasetsAgedDebtorOutstanding.  # noqa: E501
        :type: list[CodatDataContractsDatasetsAgedCurrencyOutstanding]
        """

        self._aged_currency_outstanding = aged_currency_outstanding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsAgedDebtorOutstanding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsAgedDebtorOutstanding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

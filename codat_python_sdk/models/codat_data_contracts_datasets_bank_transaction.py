# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsBankTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'cleared_on_date': 'datetime',
        'description': 'str',
        'reconciled': 'bool',
        'amount': 'float',
        'balance': 'float',
        'transaction_type': 'CodatDataContractsDatasetsTransactionType',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'cleared_on_date': 'clearedOnDate',
        'description': 'description',
        'reconciled': 'reconciled',
        'amount': 'amount',
        'balance': 'balance',
        'transaction_type': 'transactionType',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate'
    }

    def __init__(self, id=None, account_id=None, cleared_on_date=None, description=None, reconciled=None, amount=None, balance=None, transaction_type=None, modified_date=None, source_modified_date=None):  # noqa: E501
        """CodatDataContractsDatasetsBankTransaction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._cleared_on_date = None
        self._description = None
        self._reconciled = None
        self._amount = None
        self._balance = None
        self._transaction_type = None
        self._modified_date = None
        self._source_modified_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if cleared_on_date is not None:
            self.cleared_on_date = cleared_on_date
        if description is not None:
            self.description = description
        if reconciled is not None:
            self.reconciled = reconciled
        if amount is not None:
            self.amount = amount
        if balance is not None:
            self.balance = balance
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsBankTransaction.


        :param id: The id of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The account_id of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CodatDataContractsDatasetsBankTransaction.


        :param account_id: The account_id of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def cleared_on_date(self):
        """Gets the cleared_on_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The cleared_on_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._cleared_on_date

    @cleared_on_date.setter
    def cleared_on_date(self, cleared_on_date):
        """Sets the cleared_on_date of this CodatDataContractsDatasetsBankTransaction.


        :param cleared_on_date: The cleared_on_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: datetime
        """

        self._cleared_on_date = cleared_on_date

    @property
    def description(self):
        """Gets the description of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The description of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodatDataContractsDatasetsBankTransaction.


        :param description: The description of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def reconciled(self):
        """Gets the reconciled of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The reconciled of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._reconciled

    @reconciled.setter
    def reconciled(self, reconciled):
        """Sets the reconciled of this CodatDataContractsDatasetsBankTransaction.


        :param reconciled: The reconciled of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: bool
        """

        self._reconciled = reconciled

    @property
    def amount(self):
        """Gets the amount of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The amount of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CodatDataContractsDatasetsBankTransaction.


        :param amount: The amount of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def balance(self):
        """Gets the balance of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The balance of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CodatDataContractsDatasetsBankTransaction.


        :param balance: The balance of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def transaction_type(self):
        """Gets the transaction_type of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The transaction_type of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: CodatDataContractsDatasetsTransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this CodatDataContractsDatasetsBankTransaction.


        :param transaction_type: The transaction_type of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: CodatDataContractsDatasetsTransactionType
        """

        self._transaction_type = transaction_type

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsBankTransaction.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsBankTransaction.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsBankTransaction.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsBankTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsBankTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

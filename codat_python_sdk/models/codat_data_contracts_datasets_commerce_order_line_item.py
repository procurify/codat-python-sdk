# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsCommerceOrderLineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'quantity': 'float',
        'tax_percentage': 'float',
        'total_amount': 'float',
        'total_tax_amount': 'float',
        'unit_price': 'float',
        'product_ref': 'CodatDataContractsDatasetsCommerceProductRef',
        'product_variant_ref': 'CodatDataContractsDatasetsCommerceProductRef',
        'discount_allocations': 'list[CodatDataContractsDatasetsCommerceDiscountAllocation]'
    }

    attribute_map = {
        'id': 'id',
        'quantity': 'quantity',
        'tax_percentage': 'taxPercentage',
        'total_amount': 'totalAmount',
        'total_tax_amount': 'totalTaxAmount',
        'unit_price': 'unitPrice',
        'product_ref': 'productRef',
        'product_variant_ref': 'productVariantRef',
        'discount_allocations': 'discountAllocations'
    }

    def __init__(self, id=None, quantity=None, tax_percentage=None, total_amount=None, total_tax_amount=None, unit_price=None, product_ref=None, product_variant_ref=None, discount_allocations=None):  # noqa: E501
        """CodatDataContractsDatasetsCommerceOrderLineItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._quantity = None
        self._tax_percentage = None
        self._total_amount = None
        self._total_tax_amount = None
        self._unit_price = None
        self._product_ref = None
        self._product_variant_ref = None
        self._discount_allocations = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if quantity is not None:
            self.quantity = quantity
        if tax_percentage is not None:
            self.tax_percentage = tax_percentage
        if total_amount is not None:
            self.total_amount = total_amount
        if total_tax_amount is not None:
            self.total_tax_amount = total_tax_amount
        if unit_price is not None:
            self.unit_price = unit_price
        if product_ref is not None:
            self.product_ref = product_ref
        if product_variant_ref is not None:
            self.product_variant_ref = product_variant_ref
        if discount_allocations is not None:
            self.discount_allocations = discount_allocations

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param id: The id of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The quantity of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param quantity: The quantity of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The tax_percentage of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param tax_percentage: The tax_percentage of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: float
        """

        self._tax_percentage = tax_percentage

    @property
    def total_amount(self):
        """Gets the total_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The total_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param total_amount: The total_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def total_tax_amount(self):
        """Gets the total_tax_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The total_tax_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_amount

    @total_tax_amount.setter
    def total_tax_amount(self, total_tax_amount):
        """Sets the total_tax_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param total_tax_amount: The total_tax_amount of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: float
        """

        self._total_tax_amount = total_tax_amount

    @property
    def unit_price(self):
        """Gets the unit_price of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The unit_price of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param unit_price: The unit_price of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def product_ref(self):
        """Gets the product_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The product_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: CodatDataContractsDatasetsCommerceProductRef
        """
        return self._product_ref

    @product_ref.setter
    def product_ref(self, product_ref):
        """Sets the product_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param product_ref: The product_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: CodatDataContractsDatasetsCommerceProductRef
        """

        self._product_ref = product_ref

    @property
    def product_variant_ref(self):
        """Gets the product_variant_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The product_variant_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: CodatDataContractsDatasetsCommerceProductRef
        """
        return self._product_variant_ref

    @product_variant_ref.setter
    def product_variant_ref(self, product_variant_ref):
        """Sets the product_variant_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param product_variant_ref: The product_variant_ref of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: CodatDataContractsDatasetsCommerceProductRef
        """

        self._product_variant_ref = product_variant_ref

    @property
    def discount_allocations(self):
        """Gets the discount_allocations of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501


        :return: The discount_allocations of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsCommerceDiscountAllocation]
        """
        return self._discount_allocations

    @discount_allocations.setter
    def discount_allocations(self, discount_allocations):
        """Sets the discount_allocations of this CodatDataContractsDatasetsCommerceOrderLineItem.


        :param discount_allocations: The discount_allocations of this CodatDataContractsDatasetsCommerceOrderLineItem.  # noqa: E501
        :type: list[CodatDataContractsDatasetsCommerceDiscountAllocation]
        """

        self._discount_allocations = discount_allocations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsCommerceOrderLineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsCommerceOrderLineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

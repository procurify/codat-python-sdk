# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsAttachmentsDatasetAttachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'content_type': 'str',
        'date_created': 'datetime',
        'file_size': 'int',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime',
        'include_when_sent': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'content_type': 'contentType',
        'date_created': 'dateCreated',
        'file_size': 'fileSize',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate',
        'include_when_sent': 'includeWhenSent'
    }

    def __init__(self, id=None, name=None, content_type=None, date_created=None, file_size=None, modified_date=None, source_modified_date=None, include_when_sent=None):  # noqa: E501
        """CodatDataContractsDatasetsAttachmentsDatasetAttachment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._content_type = None
        self._date_created = None
        self._file_size = None
        self._modified_date = None
        self._source_modified_date = None
        self._include_when_sent = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if content_type is not None:
            self.content_type = content_type
        if date_created is not None:
            self.date_created = date_created
        if file_size is not None:
            self.file_size = file_size
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date
        if include_when_sent is not None:
            self.include_when_sent = include_when_sent

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param id: The id of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The name of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param name: The name of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def content_type(self):
        """Gets the content_type of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The content_type of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param content_type: The content_type of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def date_created(self):
        """Gets the date_created of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The date_created of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param date_created: The date_created of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def file_size(self):
        """Gets the file_size of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The file_size of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param file_size: The file_size of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    @property
    def include_when_sent(self):
        """Gets the include_when_sent of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501


        :return: The include_when_sent of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :rtype: bool
        """
        return self._include_when_sent

    @include_when_sent.setter
    def include_when_sent(self, include_when_sent):
        """Sets the include_when_sent of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.


        :param include_when_sent: The include_when_sent of this CodatDataContractsDatasetsAttachmentsDatasetAttachment.  # noqa: E501
        :type: bool
        """

        self._include_when_sent = include_when_sent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsAttachmentsDatasetAttachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsAttachmentsDatasetAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email': 'str',
        'phone': 'list[CodatDataContractsDatasetsPhone]',
        'address': 'CodatDataContractsDatasetsAddress',
        'status': 'CodatDataContractsDatasetsCustomerStatus',
        'modified_date': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'phone': 'phone',
        'address': 'address',
        'status': 'status',
        'modified_date': 'modifiedDate'
    }

    def __init__(self, name=None, email=None, phone=None, address=None, status=None, modified_date=None):  # noqa: E501
        """CodatDataContractsDatasetsContact - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._email = None
        self._phone = None
        self._address = None
        self._status = None
        self._modified_date = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address
        self.status = status
        if modified_date is not None:
            self.modified_date = modified_date

    @property
    def name(self):
        """Gets the name of this CodatDataContractsDatasetsContact.  # noqa: E501


        :return: The name of this CodatDataContractsDatasetsContact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatDataContractsDatasetsContact.


        :param name: The name of this CodatDataContractsDatasetsContact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this CodatDataContractsDatasetsContact.  # noqa: E501


        :return: The email of this CodatDataContractsDatasetsContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CodatDataContractsDatasetsContact.


        :param email: The email of this CodatDataContractsDatasetsContact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this CodatDataContractsDatasetsContact.  # noqa: E501


        :return: The phone of this CodatDataContractsDatasetsContact.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsPhone]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CodatDataContractsDatasetsContact.


        :param phone: The phone of this CodatDataContractsDatasetsContact.  # noqa: E501
        :type: list[CodatDataContractsDatasetsPhone]
        """

        self._phone = phone

    @property
    def address(self):
        """Gets the address of this CodatDataContractsDatasetsContact.  # noqa: E501


        :return: The address of this CodatDataContractsDatasetsContact.  # noqa: E501
        :rtype: CodatDataContractsDatasetsAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CodatDataContractsDatasetsContact.


        :param address: The address of this CodatDataContractsDatasetsContact.  # noqa: E501
        :type: CodatDataContractsDatasetsAddress
        """

        self._address = address

    @property
    def status(self):
        """Gets the status of this CodatDataContractsDatasetsContact.  # noqa: E501


        :return: The status of this CodatDataContractsDatasetsContact.  # noqa: E501
        :rtype: CodatDataContractsDatasetsCustomerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodatDataContractsDatasetsContact.


        :param status: The status of this CodatDataContractsDatasetsContact.  # noqa: E501
        :type: CodatDataContractsDatasetsCustomerStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsContact.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsContact.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsContact.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsContact.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

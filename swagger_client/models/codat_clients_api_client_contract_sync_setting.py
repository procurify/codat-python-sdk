# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatClientsApiClientContractSyncSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'fetch_on_first_link': 'bool',
        'sync_schedule': 'int',
        'sync_order': 'int',
        'sync_from_utc': 'datetime',
        'sync_from_window': 'int',
        'months_to_sync': 'int'
    }

    attribute_map = {
        'data_type': 'dataType',
        'fetch_on_first_link': 'fetchOnFirstLink',
        'sync_schedule': 'syncSchedule',
        'sync_order': 'syncOrder',
        'sync_from_utc': 'syncFromUtc',
        'sync_from_window': 'syncFromWindow',
        'months_to_sync': 'monthsToSync'
    }

    def __init__(self, data_type=None, fetch_on_first_link=None, sync_schedule=None, sync_order=None, sync_from_utc=None, sync_from_window=None, months_to_sync=None):  # noqa: E501
        """CodatClientsApiClientContractSyncSetting - a model defined in Swagger"""  # noqa: E501
        self._data_type = None
        self._fetch_on_first_link = None
        self._sync_schedule = None
        self._sync_order = None
        self._sync_from_utc = None
        self._sync_from_window = None
        self._months_to_sync = None
        self.discriminator = None
        if data_type is not None:
            self.data_type = data_type
        if fetch_on_first_link is not None:
            self.fetch_on_first_link = fetch_on_first_link
        if sync_schedule is not None:
            self.sync_schedule = sync_schedule
        if sync_order is not None:
            self.sync_order = sync_order
        if sync_from_utc is not None:
            self.sync_from_utc = sync_from_utc
        if sync_from_window is not None:
            self.sync_from_window = sync_from_window
        if months_to_sync is not None:
            self.months_to_sync = months_to_sync

    @property
    def data_type(self):
        """Gets the data_type of this CodatClientsApiClientContractSyncSetting.  # noqa: E501


        :return: The data_type of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CodatClientsApiClientContractSyncSetting.


        :param data_type: The data_type of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def fetch_on_first_link(self):
        """Gets the fetch_on_first_link of this CodatClientsApiClientContractSyncSetting.  # noqa: E501


        :return: The fetch_on_first_link of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :rtype: bool
        """
        return self._fetch_on_first_link

    @fetch_on_first_link.setter
    def fetch_on_first_link(self, fetch_on_first_link):
        """Sets the fetch_on_first_link of this CodatClientsApiClientContractSyncSetting.


        :param fetch_on_first_link: The fetch_on_first_link of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :type: bool
        """

        self._fetch_on_first_link = fetch_on_first_link

    @property
    def sync_schedule(self):
        """Gets the sync_schedule of this CodatClientsApiClientContractSyncSetting.  # noqa: E501


        :return: The sync_schedule of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :rtype: int
        """
        return self._sync_schedule

    @sync_schedule.setter
    def sync_schedule(self, sync_schedule):
        """Sets the sync_schedule of this CodatClientsApiClientContractSyncSetting.


        :param sync_schedule: The sync_schedule of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :type: int
        """

        self._sync_schedule = sync_schedule

    @property
    def sync_order(self):
        """Gets the sync_order of this CodatClientsApiClientContractSyncSetting.  # noqa: E501


        :return: The sync_order of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :rtype: int
        """
        return self._sync_order

    @sync_order.setter
    def sync_order(self, sync_order):
        """Sets the sync_order of this CodatClientsApiClientContractSyncSetting.


        :param sync_order: The sync_order of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :type: int
        """

        self._sync_order = sync_order

    @property
    def sync_from_utc(self):
        """Gets the sync_from_utc of this CodatClientsApiClientContractSyncSetting.  # noqa: E501


        :return: The sync_from_utc of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._sync_from_utc

    @sync_from_utc.setter
    def sync_from_utc(self, sync_from_utc):
        """Sets the sync_from_utc of this CodatClientsApiClientContractSyncSetting.


        :param sync_from_utc: The sync_from_utc of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :type: datetime
        """

        self._sync_from_utc = sync_from_utc

    @property
    def sync_from_window(self):
        """Gets the sync_from_window of this CodatClientsApiClientContractSyncSetting.  # noqa: E501


        :return: The sync_from_window of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :rtype: int
        """
        return self._sync_from_window

    @sync_from_window.setter
    def sync_from_window(self, sync_from_window):
        """Sets the sync_from_window of this CodatClientsApiClientContractSyncSetting.


        :param sync_from_window: The sync_from_window of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :type: int
        """

        self._sync_from_window = sync_from_window

    @property
    def months_to_sync(self):
        """Gets the months_to_sync of this CodatClientsApiClientContractSyncSetting.  # noqa: E501


        :return: The months_to_sync of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :rtype: int
        """
        return self._months_to_sync

    @months_to_sync.setter
    def months_to_sync(self, months_to_sync):
        """Sets the months_to_sync of this CodatClientsApiClientContractSyncSetting.


        :param months_to_sync: The months_to_sync of this CodatClientsApiClientContractSyncSetting.  # noqa: E501
        :type: int
        """

        self._months_to_sync = months_to_sync

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatClientsApiClientContractSyncSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatClientsApiClientContractSyncSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

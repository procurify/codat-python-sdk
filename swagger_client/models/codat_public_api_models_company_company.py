# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatPublicApiModelsCompanyCompany(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'platform': 'str',
        'redirect': 'str',
        'last_sync': 'datetime',
        'data_connections': 'list[CodatPublicApiModelsCompanyDataConnection]',
        'created': 'datetime',
        'created_by_user_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'platform': 'platform',
        'redirect': 'redirect',
        'last_sync': 'lastSync',
        'data_connections': 'dataConnections',
        'created': 'created',
        'created_by_user_name': 'createdByUserName'
    }

    def __init__(self, id=None, name=None, platform=None, redirect=None, last_sync=None, data_connections=None, created=None, created_by_user_name=None):  # noqa: E501
        """CodatPublicApiModelsCompanyCompany - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._platform = None
        self._redirect = None
        self._last_sync = None
        self._data_connections = None
        self._created = None
        self._created_by_user_name = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.platform = platform
        self.redirect = redirect
        if last_sync is not None:
            self.last_sync = last_sync
        self.data_connections = data_connections
        if created is not None:
            self.created = created
        if created_by_user_name is not None:
            self.created_by_user_name = created_by_user_name

    @property
    def id(self):
        """Gets the id of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The id of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatPublicApiModelsCompanyCompany.


        :param id: The id of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The name of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatPublicApiModelsCompanyCompany.


        :param name: The name of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The platform of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CodatPublicApiModelsCompanyCompany.


        :param platform: The platform of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def redirect(self):
        """Gets the redirect of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The redirect of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this CodatPublicApiModelsCompanyCompany.


        :param redirect: The redirect of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: str
        """
        if redirect is None:
            raise ValueError("Invalid value for `redirect`, must not be `None`")  # noqa: E501

        self._redirect = redirect

    @property
    def last_sync(self):
        """Gets the last_sync of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The last_sync of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this CodatPublicApiModelsCompanyCompany.


        :param last_sync: The last_sync of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: datetime
        """

        self._last_sync = last_sync

    @property
    def data_connections(self):
        """Gets the data_connections of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The data_connections of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: list[CodatPublicApiModelsCompanyDataConnection]
        """
        return self._data_connections

    @data_connections.setter
    def data_connections(self, data_connections):
        """Sets the data_connections of this CodatPublicApiModelsCompanyCompany.


        :param data_connections: The data_connections of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: list[CodatPublicApiModelsCompanyDataConnection]
        """
        if data_connections is None:
            raise ValueError("Invalid value for `data_connections`, must not be `None`")  # noqa: E501

        self._data_connections = data_connections

    @property
    def created(self):
        """Gets the created of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The created of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CodatPublicApiModelsCompanyCompany.


        :param created: The created of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by_user_name(self):
        """Gets the created_by_user_name of this CodatPublicApiModelsCompanyCompany.  # noqa: E501


        :return: The created_by_user_name of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_name

    @created_by_user_name.setter
    def created_by_user_name(self, created_by_user_name):
        """Sets the created_by_user_name of this CodatPublicApiModelsCompanyCompany.


        :param created_by_user_name: The created_by_user_name of this CodatPublicApiModelsCompanyCompany.  # noqa: E501
        :type: str
        """

        self._created_by_user_name = created_by_user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatPublicApiModelsCompanyCompany, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatPublicApiModelsCompanyCompany):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsCommerceProductVariant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'quantity': 'float',
        'is_tax_enabled': 'bool',
        'vat_percentage': 'float',
        'prices': 'list[CodatDataContractsDatasetsCommerceProductVariantPrice]',
        'shipping_required': 'bool',
        'created_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'quantity': 'quantity',
        'is_tax_enabled': 'isTaxEnabled',
        'vat_percentage': 'vatPercentage',
        'prices': 'prices',
        'shipping_required': 'shippingRequired',
        'created_date': 'createdDate'
    }

    def __init__(self, id=None, name=None, quantity=None, is_tax_enabled=None, vat_percentage=None, prices=None, shipping_required=None, created_date=None):  # noqa: E501
        """CodatDataContractsDatasetsCommerceProductVariant - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._quantity = None
        self._is_tax_enabled = None
        self._vat_percentage = None
        self._prices = None
        self._shipping_required = None
        self._created_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if quantity is not None:
            self.quantity = quantity
        if is_tax_enabled is not None:
            self.is_tax_enabled = is_tax_enabled
        if vat_percentage is not None:
            self.vat_percentage = vat_percentage
        if prices is not None:
            self.prices = prices
        if shipping_required is not None:
            self.shipping_required = shipping_required
        if created_date is not None:
            self.created_date = created_date

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsCommerceProductVariant.


        :param id: The id of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The name of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatDataContractsDatasetsCommerceProductVariant.


        :param name: The name of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The quantity of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CodatDataContractsDatasetsCommerceProductVariant.


        :param quantity: The quantity of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def is_tax_enabled(self):
        """Gets the is_tax_enabled of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The is_tax_enabled of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: bool
        """
        return self._is_tax_enabled

    @is_tax_enabled.setter
    def is_tax_enabled(self, is_tax_enabled):
        """Sets the is_tax_enabled of this CodatDataContractsDatasetsCommerceProductVariant.


        :param is_tax_enabled: The is_tax_enabled of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: bool
        """

        self._is_tax_enabled = is_tax_enabled

    @property
    def vat_percentage(self):
        """Gets the vat_percentage of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The vat_percentage of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: float
        """
        return self._vat_percentage

    @vat_percentage.setter
    def vat_percentage(self, vat_percentage):
        """Sets the vat_percentage of this CodatDataContractsDatasetsCommerceProductVariant.


        :param vat_percentage: The vat_percentage of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: float
        """

        self._vat_percentage = vat_percentage

    @property
    def prices(self):
        """Gets the prices of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The prices of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsCommerceProductVariantPrice]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this CodatDataContractsDatasetsCommerceProductVariant.


        :param prices: The prices of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: list[CodatDataContractsDatasetsCommerceProductVariantPrice]
        """

        self._prices = prices

    @property
    def shipping_required(self):
        """Gets the shipping_required of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The shipping_required of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: bool
        """
        return self._shipping_required

    @shipping_required.setter
    def shipping_required(self, shipping_required):
        """Sets the shipping_required of this CodatDataContractsDatasetsCommerceProductVariant.


        :param shipping_required: The shipping_required of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: bool
        """

        self._shipping_required = shipping_required

    @property
    def created_date(self):
        """Gets the created_date of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501


        :return: The created_date of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CodatDataContractsDatasetsCommerceProductVariant.


        :param created_date: The created_date of this CodatDataContractsDatasetsCommerceProductVariant.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsCommerceProductVariant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsCommerceProductVariant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

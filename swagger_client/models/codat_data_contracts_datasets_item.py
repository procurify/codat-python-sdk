# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'code': 'str',
        'modified_date': 'datetime',
        'source_modified_date': 'datetime',
        'item_status': 'CodatDataContractsDatasetsItemStatus',
        'type': 'CodatDataContractsDatasetsItemType',
        'is_bill_item': 'bool',
        'bill_item': 'CodatDataContractsDatasetsBillItem',
        'is_invoice_item': 'bool',
        'invoice_item': 'CodatDataContractsDatasetsInvoiceItem'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'modified_date': 'modifiedDate',
        'source_modified_date': 'sourceModifiedDate',
        'item_status': 'itemStatus',
        'type': 'type',
        'is_bill_item': 'isBillItem',
        'bill_item': 'billItem',
        'is_invoice_item': 'isInvoiceItem',
        'invoice_item': 'invoiceItem'
    }

    def __init__(self, id=None, name=None, code=None, modified_date=None, source_modified_date=None, item_status=None, type=None, is_bill_item=None, bill_item=None, is_invoice_item=None, invoice_item=None):  # noqa: E501
        """CodatDataContractsDatasetsItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._code = None
        self._modified_date = None
        self._source_modified_date = None
        self._item_status = None
        self._type = None
        self._is_bill_item = None
        self._bill_item = None
        self._is_invoice_item = None
        self._invoice_item = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if modified_date is not None:
            self.modified_date = modified_date
        if source_modified_date is not None:
            self.source_modified_date = source_modified_date
        self.item_status = item_status
        self.type = type
        self.is_bill_item = is_bill_item
        if bill_item is not None:
            self.bill_item = bill_item
        self.is_invoice_item = is_invoice_item
        if invoice_item is not None:
            self.invoice_item = invoice_item

    @property
    def id(self):
        """Gets the id of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The id of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatDataContractsDatasetsItem.


        :param id: The id of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The name of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodatDataContractsDatasetsItem.


        :param name: The name of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The code of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CodatDataContractsDatasetsItem.


        :param code: The code of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def modified_date(self):
        """Gets the modified_date of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The modified_date of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CodatDataContractsDatasetsItem.


        :param modified_date: The modified_date of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The source_modified_date of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: datetime
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CodatDataContractsDatasetsItem.


        :param source_modified_date: The source_modified_date of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: datetime
        """

        self._source_modified_date = source_modified_date

    @property
    def item_status(self):
        """Gets the item_status of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The item_status of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: CodatDataContractsDatasetsItemStatus
        """
        return self._item_status

    @item_status.setter
    def item_status(self, item_status):
        """Sets the item_status of this CodatDataContractsDatasetsItem.


        :param item_status: The item_status of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: CodatDataContractsDatasetsItemStatus
        """
        if item_status is None:
            raise ValueError("Invalid value for `item_status`, must not be `None`")  # noqa: E501

        self._item_status = item_status

    @property
    def type(self):
        """Gets the type of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The type of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: CodatDataContractsDatasetsItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodatDataContractsDatasetsItem.


        :param type: The type of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: CodatDataContractsDatasetsItemType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def is_bill_item(self):
        """Gets the is_bill_item of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The is_bill_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_bill_item

    @is_bill_item.setter
    def is_bill_item(self, is_bill_item):
        """Sets the is_bill_item of this CodatDataContractsDatasetsItem.


        :param is_bill_item: The is_bill_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: bool
        """
        if is_bill_item is None:
            raise ValueError("Invalid value for `is_bill_item`, must not be `None`")  # noqa: E501

        self._is_bill_item = is_bill_item

    @property
    def bill_item(self):
        """Gets the bill_item of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The bill_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: CodatDataContractsDatasetsBillItem
        """
        return self._bill_item

    @bill_item.setter
    def bill_item(self, bill_item):
        """Sets the bill_item of this CodatDataContractsDatasetsItem.


        :param bill_item: The bill_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: CodatDataContractsDatasetsBillItem
        """

        self._bill_item = bill_item

    @property
    def is_invoice_item(self):
        """Gets the is_invoice_item of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The is_invoice_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_invoice_item

    @is_invoice_item.setter
    def is_invoice_item(self, is_invoice_item):
        """Sets the is_invoice_item of this CodatDataContractsDatasetsItem.


        :param is_invoice_item: The is_invoice_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: bool
        """
        if is_invoice_item is None:
            raise ValueError("Invalid value for `is_invoice_item`, must not be `None`")  # noqa: E501

        self._is_invoice_item = is_invoice_item

    @property
    def invoice_item(self):
        """Gets the invoice_item of this CodatDataContractsDatasetsItem.  # noqa: E501


        :return: The invoice_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :rtype: CodatDataContractsDatasetsInvoiceItem
        """
        return self._invoice_item

    @invoice_item.setter
    def invoice_item(self, invoice_item):
        """Sets the invoice_item of this CodatDataContractsDatasetsItem.


        :param invoice_item: The invoice_item of this CodatDataContractsDatasetsItem.  # noqa: E501
        :type: CodatDataContractsDatasetsInvoiceItem
        """

        self._invoice_item = invoice_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

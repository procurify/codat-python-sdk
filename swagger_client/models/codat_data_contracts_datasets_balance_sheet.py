# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsBalanceSheet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'assets': 'CodatDataContractsDatasetsReportLine',
        'liabilities': 'CodatDataContractsDatasetsReportLine',
        'net_assets': 'float',
        'equity': 'CodatDataContractsDatasetsReportLine'
    }

    attribute_map = {
        '_date': 'date',
        'assets': 'assets',
        'liabilities': 'liabilities',
        'net_assets': 'netAssets',
        'equity': 'equity'
    }

    def __init__(self, _date=None, assets=None, liabilities=None, net_assets=None, equity=None):  # noqa: E501
        """CodatDataContractsDatasetsBalanceSheet - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._assets = None
        self._liabilities = None
        self._net_assets = None
        self._equity = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if assets is not None:
            self.assets = assets
        if liabilities is not None:
            self.liabilities = liabilities
        self.net_assets = net_assets
        if equity is not None:
            self.equity = equity

    @property
    def _date(self):
        """Gets the _date of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501


        :return: The _date of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CodatDataContractsDatasetsBalanceSheet.


        :param _date: The _date of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def assets(self):
        """Gets the assets of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501


        :return: The assets of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :rtype: CodatDataContractsDatasetsReportLine
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this CodatDataContractsDatasetsBalanceSheet.


        :param assets: The assets of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :type: CodatDataContractsDatasetsReportLine
        """

        self._assets = assets

    @property
    def liabilities(self):
        """Gets the liabilities of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501


        :return: The liabilities of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :rtype: CodatDataContractsDatasetsReportLine
        """
        return self._liabilities

    @liabilities.setter
    def liabilities(self, liabilities):
        """Sets the liabilities of this CodatDataContractsDatasetsBalanceSheet.


        :param liabilities: The liabilities of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :type: CodatDataContractsDatasetsReportLine
        """

        self._liabilities = liabilities

    @property
    def net_assets(self):
        """Gets the net_assets of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501


        :return: The net_assets of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :rtype: float
        """
        return self._net_assets

    @net_assets.setter
    def net_assets(self, net_assets):
        """Sets the net_assets of this CodatDataContractsDatasetsBalanceSheet.


        :param net_assets: The net_assets of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :type: float
        """
        if net_assets is None:
            raise ValueError("Invalid value for `net_assets`, must not be `None`")  # noqa: E501

        self._net_assets = net_assets

    @property
    def equity(self):
        """Gets the equity of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501


        :return: The equity of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :rtype: CodatDataContractsDatasetsReportLine
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this CodatDataContractsDatasetsBalanceSheet.


        :param equity: The equity of this CodatDataContractsDatasetsBalanceSheet.  # noqa: E501
        :type: CodatDataContractsDatasetsReportLine
        """

        self._equity = equity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsBalanceSheet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsBalanceSheet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

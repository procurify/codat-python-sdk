# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatDataContractsDatasetsCompanyDataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'accounting_platform_ref': 'str',
        'company_legal_name': 'str',
        'addresses': 'list[CodatDataContractsDatasetsAddress]',
        'phone_numbers': 'list[CodatDataContractsDatasetsPhone]',
        'web_links': 'list[CodatDataContractsDatasetsWebLink]',
        'ledger_lock_date': 'datetime',
        'registration_number': 'str',
        'tax_number': 'str',
        'financial_year_start_date': 'datetime',
        'base_currency': 'str',
        'source_urls': 'dict(str, str)',
        'created_date': 'datetime',
        'contract_version': 'str'
    }

    attribute_map = {
        'company_name': 'companyName',
        'accounting_platform_ref': 'accountingPlatformRef',
        'company_legal_name': 'companyLegalName',
        'addresses': 'addresses',
        'phone_numbers': 'phoneNumbers',
        'web_links': 'webLinks',
        'ledger_lock_date': 'ledgerLockDate',
        'registration_number': 'registrationNumber',
        'tax_number': 'taxNumber',
        'financial_year_start_date': 'financialYearStartDate',
        'base_currency': 'baseCurrency',
        'source_urls': 'sourceUrls',
        'created_date': 'createdDate',
        'contract_version': 'contractVersion'
    }

    def __init__(self, company_name=None, accounting_platform_ref=None, company_legal_name=None, addresses=None, phone_numbers=None, web_links=None, ledger_lock_date=None, registration_number=None, tax_number=None, financial_year_start_date=None, base_currency=None, source_urls=None, created_date=None, contract_version=None):  # noqa: E501
        """CodatDataContractsDatasetsCompanyDataset - a model defined in Swagger"""  # noqa: E501
        self._company_name = None
        self._accounting_platform_ref = None
        self._company_legal_name = None
        self._addresses = None
        self._phone_numbers = None
        self._web_links = None
        self._ledger_lock_date = None
        self._registration_number = None
        self._tax_number = None
        self._financial_year_start_date = None
        self._base_currency = None
        self._source_urls = None
        self._created_date = None
        self._contract_version = None
        self.discriminator = None
        if company_name is not None:
            self.company_name = company_name
        if accounting_platform_ref is not None:
            self.accounting_platform_ref = accounting_platform_ref
        if company_legal_name is not None:
            self.company_legal_name = company_legal_name
        if addresses is not None:
            self.addresses = addresses
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if web_links is not None:
            self.web_links = web_links
        if ledger_lock_date is not None:
            self.ledger_lock_date = ledger_lock_date
        if registration_number is not None:
            self.registration_number = registration_number
        if tax_number is not None:
            self.tax_number = tax_number
        if financial_year_start_date is not None:
            self.financial_year_start_date = financial_year_start_date
        if base_currency is not None:
            self.base_currency = base_currency
        if source_urls is not None:
            self.source_urls = source_urls
        if created_date is not None:
            self.created_date = created_date
        if contract_version is not None:
            self.contract_version = contract_version

    @property
    def company_name(self):
        """Gets the company_name of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The company_name of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CodatDataContractsDatasetsCompanyDataset.


        :param company_name: The company_name of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def accounting_platform_ref(self):
        """Gets the accounting_platform_ref of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The accounting_platform_ref of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: str
        """
        return self._accounting_platform_ref

    @accounting_platform_ref.setter
    def accounting_platform_ref(self, accounting_platform_ref):
        """Sets the accounting_platform_ref of this CodatDataContractsDatasetsCompanyDataset.


        :param accounting_platform_ref: The accounting_platform_ref of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: str
        """

        self._accounting_platform_ref = accounting_platform_ref

    @property
    def company_legal_name(self):
        """Gets the company_legal_name of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The company_legal_name of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: str
        """
        return self._company_legal_name

    @company_legal_name.setter
    def company_legal_name(self, company_legal_name):
        """Sets the company_legal_name of this CodatDataContractsDatasetsCompanyDataset.


        :param company_legal_name: The company_legal_name of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: str
        """

        self._company_legal_name = company_legal_name

    @property
    def addresses(self):
        """Gets the addresses of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The addresses of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CodatDataContractsDatasetsCompanyDataset.


        :param addresses: The addresses of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: list[CodatDataContractsDatasetsAddress]
        """

        self._addresses = addresses

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The phone_numbers of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsPhone]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this CodatDataContractsDatasetsCompanyDataset.


        :param phone_numbers: The phone_numbers of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: list[CodatDataContractsDatasetsPhone]
        """

        self._phone_numbers = phone_numbers

    @property
    def web_links(self):
        """Gets the web_links of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The web_links of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: list[CodatDataContractsDatasetsWebLink]
        """
        return self._web_links

    @web_links.setter
    def web_links(self, web_links):
        """Sets the web_links of this CodatDataContractsDatasetsCompanyDataset.


        :param web_links: The web_links of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: list[CodatDataContractsDatasetsWebLink]
        """

        self._web_links = web_links

    @property
    def ledger_lock_date(self):
        """Gets the ledger_lock_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The ledger_lock_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._ledger_lock_date

    @ledger_lock_date.setter
    def ledger_lock_date(self, ledger_lock_date):
        """Sets the ledger_lock_date of this CodatDataContractsDatasetsCompanyDataset.


        :param ledger_lock_date: The ledger_lock_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: datetime
        """

        self._ledger_lock_date = ledger_lock_date

    @property
    def registration_number(self):
        """Gets the registration_number of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The registration_number of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this CodatDataContractsDatasetsCompanyDataset.


        :param registration_number: The registration_number of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: str
        """

        self._registration_number = registration_number

    @property
    def tax_number(self):
        """Gets the tax_number of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The tax_number of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this CodatDataContractsDatasetsCompanyDataset.


        :param tax_number: The tax_number of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: str
        """

        self._tax_number = tax_number

    @property
    def financial_year_start_date(self):
        """Gets the financial_year_start_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The financial_year_start_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._financial_year_start_date

    @financial_year_start_date.setter
    def financial_year_start_date(self, financial_year_start_date):
        """Sets the financial_year_start_date of this CodatDataContractsDatasetsCompanyDataset.


        :param financial_year_start_date: The financial_year_start_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: datetime
        """

        self._financial_year_start_date = financial_year_start_date

    @property
    def base_currency(self):
        """Gets the base_currency of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The base_currency of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this CodatDataContractsDatasetsCompanyDataset.


        :param base_currency: The base_currency of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: str
        """

        self._base_currency = base_currency

    @property
    def source_urls(self):
        """Gets the source_urls of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The source_urls of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._source_urls

    @source_urls.setter
    def source_urls(self, source_urls):
        """Sets the source_urls of this CodatDataContractsDatasetsCompanyDataset.


        :param source_urls: The source_urls of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: dict(str, str)
        """

        self._source_urls = source_urls

    @property
    def created_date(self):
        """Gets the created_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The created_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CodatDataContractsDatasetsCompanyDataset.


        :param created_date: The created_date of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def contract_version(self):
        """Gets the contract_version of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501


        :return: The contract_version of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :rtype: str
        """
        return self._contract_version

    @contract_version.setter
    def contract_version(self, contract_version):
        """Sets the contract_version of this CodatDataContractsDatasetsCompanyDataset.


        :param contract_version: The contract_version of this CodatDataContractsDatasetsCompanyDataset.  # noqa: E501
        :type: str
        """

        self._contract_version = contract_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatDataContractsDatasetsCompanyDataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatDataContractsDatasetsCompanyDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Codat API

    [What's changed in our Swagger](https://docs.codat.io/docs/new-swagger-ui)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodatPublicApiModelsCompanyDataConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'integration_id': 'str',
        'source_id': 'str',
        'platform_name': 'str',
        'link_url': 'str',
        'status': 'str',
        'last_sync': 'datetime',
        'created': 'datetime',
        'source_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'integration_id': 'integrationId',
        'source_id': 'sourceId',
        'platform_name': 'platformName',
        'link_url': 'linkUrl',
        'status': 'status',
        'last_sync': 'lastSync',
        'created': 'created',
        'source_type': 'sourceType'
    }

    def __init__(self, id=None, integration_id=None, source_id=None, platform_name=None, link_url=None, status=None, last_sync=None, created=None, source_type=None):  # noqa: E501
        """CodatPublicApiModelsCompanyDataConnection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._integration_id = None
        self._source_id = None
        self._platform_name = None
        self._link_url = None
        self._status = None
        self._last_sync = None
        self._created = None
        self._source_type = None
        self.discriminator = None
        self.id = id
        self.integration_id = integration_id
        self.source_id = source_id
        self.platform_name = platform_name
        self.link_url = link_url
        if status is not None:
            self.status = status
        if last_sync is not None:
            self.last_sync = last_sync
        if created is not None:
            self.created = created
        if source_type is not None:
            self.source_type = source_type

    @property
    def id(self):
        """Gets the id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodatPublicApiModelsCompanyDataConnection.


        :param id: The id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def integration_id(self):
        """Gets the integration_id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The integration_id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this CodatPublicApiModelsCompanyDataConnection.


        :param integration_id: The integration_id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: str
        """
        if integration_id is None:
            raise ValueError("Invalid value for `integration_id`, must not be `None`")  # noqa: E501

        self._integration_id = integration_id

    @property
    def source_id(self):
        """Gets the source_id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The source_id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CodatPublicApiModelsCompanyDataConnection.


        :param source_id: The source_id of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def platform_name(self):
        """Gets the platform_name of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The platform_name of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this CodatPublicApiModelsCompanyDataConnection.


        :param platform_name: The platform_name of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: str
        """
        if platform_name is None:
            raise ValueError("Invalid value for `platform_name`, must not be `None`")  # noqa: E501

        self._platform_name = platform_name

    @property
    def link_url(self):
        """Gets the link_url of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The link_url of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """Sets the link_url of this CodatPublicApiModelsCompanyDataConnection.


        :param link_url: The link_url of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: str
        """
        if link_url is None:
            raise ValueError("Invalid value for `link_url`, must not be `None`")  # noqa: E501

        self._link_url = link_url

    @property
    def status(self):
        """Gets the status of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The status of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodatPublicApiModelsCompanyDataConnection.


        :param status: The status of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def last_sync(self):
        """Gets the last_sync of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The last_sync of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this CodatPublicApiModelsCompanyDataConnection.


        :param last_sync: The last_sync of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: datetime
        """

        self._last_sync = last_sync

    @property
    def created(self):
        """Gets the created of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The created of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CodatPublicApiModelsCompanyDataConnection.


        :param created: The created of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def source_type(self):
        """Gets the source_type of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501


        :return: The source_type of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CodatPublicApiModelsCompanyDataConnection.


        :param source_type: The source_type of this CodatPublicApiModelsCompanyDataConnection.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodatPublicApiModelsCompanyDataConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodatPublicApiModelsCompanyDataConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
